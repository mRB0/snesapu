0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0001) ; Generated by PSoC Designer ???
                                   (0002) ;
                                   (0003) ;@Id: boot.tpl#884 @
                                   (0004) ;=============================================================================
                                   (0005) ;  FILENAME:   boot.asm
                                   (0006) ;  VERSION:    4.17
                                   (0007) ;  DATE:       28 June 2007
                                   (0008) ;
                                   (0009) ;  DESCRIPTION:
                                   (0010) ;  M8C Boot Code for CY8C21x34 microcontroller devices.
                                   (0011) ;
                                   (0012) ;  Copyright (C) Cypress MicroSystems 2000-2004. All rights reserved.
                                   (0013) ;
                                   (0014) ; NOTES:
                                   (0015) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                   (0016) ; the project's root directory to create BOOT.ASM. Any changes made to
                                   (0017) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                   (0018) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0019) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                   (0020) ; are not accidentally modified.
                                   (0021) ;
                                   (0022) ;=============================================================================
                                   (0023) 
                                   (0024) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                   (0025) include "m8c.inc"			;Part specific file
                                   (0026) include "m8ssc.inc"			;Part specific file
                                   (0027) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                   (0028) 
                                   (0029) ;--------------------------------------
                                   (0030) ; Export Declarations
                                   (0031) ;--------------------------------------
                                   (0032) 
                                   (0033) export __Start
                                   (0034) IF	(TOOLCHAIN & HITECH)
                                   (0035) ELSE
                                   (0036) export __bss_start
                                   (0037) export __data_start
                                   (0038) export __idata_start
                                   (0039) export __func_lit_start
                                   (0040) export __text_start
                                   (0041) ENDIF
                                   (0042) export  _bGetPowerSetting
                                   (0043) export   bGetPowerSetting
                                   (0044) 
                                   (0045) 
                                   (0046) ;--------------------------------------
                                   (0047) ; Optimization flags
                                   (0048) ;--------------------------------------
                                   (0049) ;
                                   (0050) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0051) ; boot.asm. See the notes in the banner comment at the beginning of
                                   (0052) ; this file.
                                   (0053) 
                                   (0054) ; Optimization for Assembly language (only) projects and C-language projects
                                   (0055) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                   (0056) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0057) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0058) ;
                                   (0059) IF	(TOOLCHAIN & HITECH)
                                   (0060) ; The C compiler will customize the startup code - it's not required here
                                   (0061) 
                                   (0062) C_LANGUAGE_SUPPORT:              equ 0
                                   (0063) ELSE
                                   (0064) C_LANGUAGE_SUPPORT:              equ 1
                                   (0065) ENDIF
                                   (0066) 
                                   (0067) 
                                   (0068) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0069) ; to invoke the user's _main code. If _main executes a return instruction,
                                   (0070) ; boot provides an infinite loop. By changing the following equate from zero
                                   (0071) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0072) ; bytes on the stack which are otherwise required for the return address. If
                                   (0073) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                   (0074) ; release, the C compiler automatically places an infinite loop at the end
                                   (0075) ; of main, rather than a return instruction.)
                                   (0076) ;
                                   (0077) ENABLE_LJMP_TO_MAIN:             equ 0
                                   (0078) 
                                   (0079) 
                                   (0080) ;-----------------------------------------------------------------------------
                                   (0081) ; Interrupt Vector Table
                                   (0082) ;-----------------------------------------------------------------------------
                                   (0083) ;
                                   (0084) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0085) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                   (0086) ; very short ISRs could be encoded within the table itself. Normally,
                                   (0087) ; vector jump targets are modified automatically according to the user
                                   (0088) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0089) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0090) ; configuration files. If you need to hard code a vector, update the
                                   (0091) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0092) ; of this file.
                                   (0093) ;-----------------------------------------------------------------------------
                                   (0094) 
                                   (0095)     AREA TOP (ROM, ABS, CON)
                                   (0096) 
                                   (0097)     org   0                        ;Reset Interrupt Vector
                                   (0098) IF	(TOOLCHAIN & HITECH)
                                   (0099) ;   jmp   __Start                  ;C compiler fills in this vector
                                   (0100) ELSE
                                   (0101)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0102) ENDIF
                                   (0103) 
                                   (0104)     org   04h                      ;Supply Monitor Interrupt Vector
0004: 30       HALT                (0105)     halt                           ;Stop execution if power falls too low
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0106) 
                                   (0107)     org   08h                      ;Analog Column 0 Interrupt Vector
                                   (0108)     // call	void_handler
0008: 7E       RETI                (0109)     reti
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0110) 
                                   (0111)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                   (0112)     // call	void_handler
000C: 7E       RETI                (0113)     reti
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
0010: 30       HALT  
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
0014: 30       HALT  
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0114) 
                                   (0115)     org   18h                      ;VC3 Interrupt Vector
                                   (0116)     // call	void_handler
0018: 7E       RETI                (0117)     reti
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0118) 
                                   (0119)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0120)     // call	void_handler
001C: 7E       RETI                (0121)     reti
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0122) 
                                   (0123)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                   (0124)     // call	void_handler
0020: 7E       RETI                (0125)     reti
0021: 30       HALT  
0022: 30       HALT  
0023: 30       HALT  
                                   (0126) 
                                   (0127)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0128)     // call	void_handler
0024: 7E       RETI                (0129)     reti
0025: 30       HALT  
0026: 30       HALT  
0027: 30       HALT  
                                   (0130) 
                                   (0131)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 68 LJMP  0x0268        (0132)     ljmp	_UART_TX_ISR
002B: 7E       RETI                (0133)     reti
                                   (0134) 
                                   (0135)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 02 69 LJMP  0x0269        (0136)     ljmp	_UART_RX_ISR
002F: 7E       RETI                (0137)     reti
0030: 30       HALT  
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
0034: 30       HALT  
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
0038: 30       HALT  
0039: 30       HALT  
003A: 30       HALT  
003B: 30       HALT  
003C: 30       HALT  
003D: 30       HALT  
003E: 30       HALT  
003F: 30       HALT  
0040: 30       HALT  
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
0044: 30       HALT  
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
0048: 30       HALT  
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
004C: 30       HALT  
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
0050: 30       HALT  
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
0054: 30       HALT  
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
0058: 30       HALT  
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
005C: 30       HALT  
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0138) 
                                   (0139)     org   60h                      ;PSoC I2C Interrupt Vector
                                   (0140)     // call	void_handler
0060: 7E       RETI                (0141)     reti
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0142) 
                                   (0143)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0144)     // call	void_handler
0064: 7E       RETI                (0145)     reti
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0146) 
                                   (0147) ;-----------------------------------------------------------------------------
                                   (0148) ;  Start of Execution.
                                   (0149) ;-----------------------------------------------------------------------------
                                   (0150) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0151) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0152) ;
                                   (0153) 
                                   (0154) IF	(TOOLCHAIN & HITECH)
                                   (0155)  	AREA PD_startup(CODE, REL, CON)
                                   (0156) ELSE
                                   (0157)     org 68h
                                   (0158) ENDIF
                                   (0159) __Start:
                                   (0160) 
                                   (0161)     ; initialize SMP values for voltage stabilization, if required,
                                   (0162)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0163)     ; least for now. 
                                   (0164)     ;
0068: 71 10    OR    F,16          (0165)     M8C_SetBank1
006A: 62 E3 80 MOV   REG[227],128  (0166)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,239         (0167)     M8C_SetBank0
                                   (0168) 
                                   (0169) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0170)     M8C_EnableWatchDog
                                   (0171) ENDIF
                                   (0172) 
006F: 41 FE FB AND   REG[254],251  (0173)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0174) 
                                   (0175)     ;---------------------------
                                   (0176)     ; Set up the Temporary stack
                                   (0177)     ;---------------------------
                                   (0178)     ; A temporary stack is set up for the SSC instructions.
                                   (0179)     ; The real stack start will be assigned later.
                                   (0180)     ;
                                   (0181) _stack_start:          equ 80h
0072: 50 80    MOV   A,128         (0182)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0074: 4E       SWAP  SP,A          (0183)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0184) 
                                   (0185)     ;------------------------
                                   (0186)     ; Set Power-related Trim 
                                   (0187)     ;------------------------
                                   (0188) 
                                   (0189) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                   (0190)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0191)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0192)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                   (0193)  ENDIF
                                   (0194) ENDIF ; 5.0 V Operation
                                   (0195) 
                                   (0196) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0197)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0198)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0199)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                   (0200)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0201)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                   (0202)  ENDIF
                                   (0203) ENDIF ; 3.3 Volt Operation
                                   (0204) 
                                   (0205) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                   (0206)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0207)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                   (0208) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                   (0209) 
                                   (0210) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                   (0211)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0212)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                   (0213) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                   (0214) 
0075: 55 F8 00 MOV   [248],0       (0215)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0078: 55 F9 00 MOV   [249],0       (0216)     mov  [bSSC_KEYSP], 0
                                   (0217) 
                                   (0218)     ;---------------------------------------
                                   (0219)     ; Initialize Crystal Oscillator and PLL
                                   (0220)     ;---------------------------------------
                                   (0221) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                   (0222)     M8C_SetBank1
                                   (0223)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                   (0224)     M8C_SetBank0
                                   (0225)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0226) 
                                   (0227) ELSE 	 ;*** all other voltages OK for 12Mhz ***
007B: 71 10    OR    F,16          (0228)     M8C_SetBank1
007D: 62 E0 02 MOV   REG[224],2    (0229)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0080: 70 EF    AND   F,239         (0230)     M8C_SetBank0
0082: 62 E3 38 MOV   REG[227],56   (0231)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0232) 
                                   (0233) ENDIF
                                   (0234) 
                                   (0235) IF	(TOOLCHAIN & HITECH)
                                   (0236)     ;---------------------------------------------
                                   (0237)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                   (0238)     ;---------------------------------------------
                                   (0239) 	global		__Lstackps
                                   (0240) 	mov     a,low __Lstackps
                                   (0241) 	swap    a,sp
                                   (0242) 
                                   (0243) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                   (0244)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                   (0245)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                   (0246)     RAM_SETPAGE_CUR 0
                                   (0247)     RAM_SETPAGE_MVW 0
                                   (0248)     RAM_SETPAGE_MVR 0
                                   (0249)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                   (0250)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0251)     ELSE
                                   (0252)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0253)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0254) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                   (0255) ELSE
                                   (0256)     ;---------------------------------------------
                                   (0257)     ; ImageCraft Enter the Large Memory Model, if applicable
                                   (0258)     ;---------------------------------------------
                                   (0259) IF ( SYSTEM_LARGE_MEMORY_MODEL )
0085: 62 D1 01 MOV   REG[209],1    (0260)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
0088: 50 00    MOV   A,0           (0261)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
008A: 4E       SWAP  SP,A          (0262)     swap  A, SP
008B: 62 D3 01 MOV   REG[211],1    (0263)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
008E: 62 D0 00 MOV   REG[208],0    (0264)     RAM_SETPAGE_CUR 0
0091: 62 D5 00 MOV   REG[213],0    (0265)     RAM_SETPAGE_MVW 0
0094: 62 D4 00 MOV   REG[212],0    (0266)     RAM_SETPAGE_MVR 0
                                   (0267) 
                                   (0268)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
0097: 71 C0    OR    F,192         (0269)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0270)   ELSE
                                   (0271)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0272)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0273) ELSE
                                   (0274)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                   (0275)     swap  SP, A
                                   (0276) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                   (0277) ENDIF ;	TOOLCHAIN
                                   (0278) 
                                   (0279)     ;-------------------------
                                   (0280)     ; Load Base Configuration
                                   (0281)     ;-------------------------
                                   (0282)     ; Load global parameter settings and load the user modules in the
                                   (0283)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0284)     ; to minimize start up time; (2) We may still need to play with the
                                   (0285)     ; Sleep Timer.
                                   (0286)     ;
0099: 7C 02 5B LCALL 0x025B        (0287)     lcall LoadConfigInit
                                   (0288) 
                                   (0289)     ;-----------------------------------
                                   (0290)     ; Initialize C Run-Time Environment
                                   (0291)     ;-----------------------------------
                                   (0292) IF ( C_LANGUAGE_SUPPORT )
                                   (0293) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                   (0294)     mov  A,0                           ; clear the 'bss' segment to zero
                                   (0295)     mov  [__r0],<__bss_start
                                   (0296) BssLoop:
                                   (0297)     cmp  [__r0],<__bss_end
                                   (0298)     jz   BssDone
                                   (0299)     mvi  [__r0],A
                                   (0300)     jmp  BssLoop
                                   (0301) BssDone:
                                   (0302)     mov  A,>__idata_start              ; copy idata to data segment
                                   (0303)     mov  X,<__idata_start
                                   (0304)     mov  [__r0],<__data_start
                                   (0305) IDataLoop:
                                   (0306)     cmp  [__r0],<__data_end
                                   (0307)     jz   C_RTE_Done
                                   (0308)     push A
                                   (0309)     romx
                                   (0310)     mvi  [__r0],A
                                   (0311)     pop  A
                                   (0312)     inc  X
                                   (0313)     adc  A,0
                                   (0314)     jmp  IDataLoop
                                   (0315) 
                                   (0316) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0317) 
                                   (0318) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009C: 62 D0 00 MOV   REG[208],0    (0319)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0320)                                        ; to use the Virtual Register page.
                                   (0321) 
                                   (0322)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0323)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0324)     ; text segment and may have been relocated by the Code Compressor.
                                   (0325)     ;
009F: 50 01    MOV   A,1           (0326)     mov   A, >__pXIData                ; Get the address of the flash
00A1: 57 54    MOV   X,84          (0327)     mov   X, <__pXIData                ;   pointer to the xidata area.
00A3: 08       PUSH  A             (0328)     push  A
00A4: 28       ROMX                (0329)     romx                               ; get the MSB of xidata's address
00A5: 53 17    MOV   [__r0],A      (0330)     mov   [__r0], A
00A7: 18       POP   A             (0331)     pop   A
00A8: 75       INC   X             (0332)     inc   X
00A9: 09 00    ADC   A,0           (0333)     adc   A, 0
00AB: 28       ROMX                (0334)     romx                               ; get the LSB of xidata's address
00AC: 4B       SWAP  A,X           (0335)     swap  A, X
00AD: 51 17    MOV   A,[23]        (0336)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0337)                                        ;   XIData structure list in flash
00AF: 80 04    JMP   0x00B4        (0338)     jmp   .AccessStruct
                                   (0339) 
                                   (0340)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0341)     ; values of C variables. Each structure contains 3 member elements.
                                   (0342)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0343)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0344)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0345)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0346)     ; value in the second member element, an unsigned byte:
                                   (0347)     ; (1) If the value of the second element is non-zero, it represents
                                   (0348)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0349)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0350)     ; the bytes are copied to the block of RAM.
                                   (0351)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0352)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0353)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0354) 
                                   (0355) .AccessNextStructLoop:
00B1: 75       INC   X             (0356)     inc   X                            ; pXIData++
00B2: 09 00    ADC   A,0           (0357)     adc   A, 0
                                   (0358) .AccessStruct:                         ; Entry point for first block
                                   (0359)     ;
                                   (0360)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0361)     ;
00B4: 62 E3 00 MOV   REG[227],0    (0362)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00B7: 08       PUSH  A             (0363)     push  A
00B8: 28       ROMX                (0364)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00B9: 60 D5    MOV   REG[213],A    (0365)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00BB: 74       INC   A             (0366)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00BC: A0 4B    JZ    0x0108        (0367)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00BE: 18       POP   A             (0368)     pop   A                            ; restore pXIData to [A,X]
00BF: 75       INC   X             (0369)     inc   X                            ; pXIData++
00C0: 09 00    ADC   A,0           (0370)     adc   A, 0
00C2: 08       PUSH  A             (0371)     push  A
00C3: 28       ROMX                (0372)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00C4: 53 17    MOV   [__r0],A      (0373)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00C6: 18       POP   A             (0374)     pop   A                            ; restore pXIData to [A,X]
00C7: 75       INC   X             (0375)     inc   X                            ; pXIData++ (point to size)
00C8: 09 00    ADC   A,0           (0376)     adc   A, 0
00CA: 08       PUSH  A             (0377)     push  A
00CB: 28       ROMX                (0378)     romx                               ; Get the size (CPU.A <- *pXIData)
00CC: A0 1C    JZ    0x00E9        (0379)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00CE: 53 16    MOV   [__r1],A      (0380)     mov   [__r1], A                    ;             else downcount in __r1
00D0: 18       POP   A             (0381)     pop   A                            ; restore pXIData to [A,X]
                                   (0382) 
                                   (0383) .CopyNextByteLoop:
                                   (0384)     ; For each byte in the structure's array member, copy from flash to RAM.
                                   (0385)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                   (0386)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                   (0387)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0388)     ;
00D1: 75       INC   X             (0389)     inc   X                            ; pXIData++ (point to next data byte)
00D2: 09 00    ADC   A,0           (0390)     adc   A, 0
00D4: 08       PUSH  A             (0391)     push  A
00D5: 28       ROMX                (0392)     romx                               ; Get the data value (CPU.A <- *pXIData)
00D6: 3F 17    MVI   [__r0],A      (0393)     mvi   [__r0], A                    ; Transfer the data to RAM
00D8: 47 17 FF TST   [23],255      (0394)     tst   [__r0], 0xff                 ; Check for page crossing
00DB: B0 06    JNZ   0x00E2        (0395)     jnz   .CopyLoopTail                ;   No crossing, keep going
00DD: 5D D5    MOV   A,REG[213]    (0396)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00DF: 74       INC   A             (0397)     inc   A
00E0: 60 D5    MOV   REG[213],A    (0398)     mov   reg[ MVW_PP], A
                                   (0399) .CopyLoopTail:
00E2: 18       POP   A             (0400)     pop   A                            ; restore pXIData to [A,X]
00E3: 7A 16    DEC   [__r1]        (0401)     dec   [__r1]                       ; End of this array in flash?
00E5: BF EB    JNZ   0x00D1        (0402)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00E7: 8F C9    JMP   0x00B1        (0403)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                   (0404) 
                                   (0405) .ClearRAMBlockToZero:
00E9: 18       POP   A             (0406)     pop   A                            ; restore pXIData to [A,X]
00EA: 75       INC   X             (0407)     inc   X                            ; pXIData++ (point to next data byte)
00EB: 09 00    ADC   A,0           (0408)     adc   A, 0
00ED: 08       PUSH  A             (0409)     push  A
00EE: 28       ROMX                (0410)     romx                               ; Get the run length (CPU.A <- *pXIData)
00EF: 53 16    MOV   [__r1],A      (0411)     mov   [__r1], A                    ; Initialize downcounter
00F1: 50 00    MOV   A,0           (0412)     mov   A, 0                         ; Initialize source data
                                   (0413) 
                                   (0414) .ClearRAMBlockLoop:
                                   (0415)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0416)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0417)     ;
00F3: 3F 17    MVI   [__r0],A      (0418)     mvi   [__r0], A                    ; Clear a byte
00F5: 47 17 FF TST   [23],255      (0419)     tst   [__r0], 0xff                 ; Check for page crossing
00F8: B0 08    JNZ   0x0101        (0420)     jnz   .ClearLoopTail               ;   No crossing, keep going
00FA: 5D D5    MOV   A,REG[213]    (0421)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FC: 74       INC   A             (0422)     inc   A
00FD: 60 D5    MOV   REG[213],A    (0423)     mov   reg[ MVW_PP], A
00FF: 50 00    MOV   A,0           (0424)     mov   A, 0                         ; Restore the zero used for clearing
                                   (0425) .ClearLoopTail:
0101: 7A 16    DEC   [__r1]        (0426)     dec   [__r1]                       ; Was this the last byte?
0103: BF EF    JNZ   0x00F3        (0427)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0105: 18       POP   A             (0428)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0106: 8F AA    JMP   0x00B1        (0429)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                   (0430) 
                                   (0431) .C_RTE_WrapUp:
0108: 18       POP   A             (0432)     pop   A                            ; balance stack
                                   (0433) 
                                   (0434) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                   (0435) 
                                   (0436) C_RTE_Done:
                                   (0437) 
                                   (0438) ENDIF ; C_LANGUAGE_SUPPORT
                                   (0439) 
                                   (0440)     ;-------------------------------
                                   (0441)     ; Voltage Stabilization for SMP
                                   (0442)     ;-------------------------------
                                   (0443) 
                                   (0444) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                   (0445) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                   (0446)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0447)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                   (0448)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                   (0449)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0450)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                   (0451)     M8C_SetBank1
                                   (0452)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                   (0453)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                   (0454)     M8C_SetBank0
                                   (0455)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                   (0456)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                   (0457) .WaitFor2ms:
                                   (0458)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                   (0459)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                   (0460) ENDIF ; SMP is operational
                                   (0461) ENDIF ; 5.0V Operation
                                   (0462) 
                                   (0463)     ;-------------------------------
                                   (0464)     ; Set Power-On Reset (POR) Level
                                   (0465)     ;-------------------------------
                                   (0466) 
                                   (0467)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                   (0468)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                   (0469)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                   (0470)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                   (0471)     ;  lead to corruption of PSoC flash.
                                   (0472) 
0109: 71 10    OR    F,16          (0473)     M8C_SetBank1
                                   (0474) 
                                   (0475) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                   (0476)                                                ;  Yes, lowest trip already set
                                   (0477) ELSE                                           ;   No, must adjust POR...
                                   (0478) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                   (0479)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                   (0480) ELSE
                                   (0481) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                   (0482)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                   (0483)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                   (0484)  ELSE                                          ;    No, fast mode
                                   (0485)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
010B: 43 E3 10 OR    REG[227],16   (0486)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                   (0487)   ELSE ; 24HMz                                 ;
                                   (0488)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                   (0489)   ENDIF ; 24MHz
                                   (0490)  ENDIF ; Slow Mode
                                   (0491) ENDIF ; 5.0V Operation
                                   (0492) ENDIF ; 3.3V Operation
                                   (0493) ENDIF ; 2.7V Operation
                                   (0494) 
010E: 70 EF    AND   F,239         (0495)     M8C_SetBank0
                                   (0496) 
                                   (0497)     ;----------------------------
                                   (0498)     ; Wrap up and invoke "main"
                                   (0499)     ;----------------------------
                                   (0500) 
                                   (0501)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                   (0502)     ; no interrupts should be enabled now, so may as well clear the register.
                                   (0503)     ;
0110: 62 E0 00 MOV   REG[224],0    (0504)     mov  reg[INT_MSK0],0
                                   (0505) 
                                   (0506)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                   (0507)     ;
0113: 71 10    OR    F,16          (0508)     M8C_SetBank1
0115: 62 E0 00 MOV   REG[224],0    (0509)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0118: 70 EF    AND   F,239         (0510)     M8C_SetBank0
                                   (0511) 
                                   (0512)     ; Global Interrupt are NOT enabled, this should be done in main().
                                   (0513)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                   (0514)     ; Global Interrupts should be enabled as soon as possible in main().
                                   (0515)     ;
011A: 62 E2 00 MOV   REG[226],0    (0516)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                   (0517)                                    ; have been set during the boot process.
                                   (0518) IF	(TOOLCHAIN & HITECH)
                                   (0519) 	ljmp  startup                  ; Jump to C compiler startup code
                                   (0520) ELSE
                                   (0521) IF ENABLE_LJMP_TO_MAIN
                                   (0522)     ljmp  _main                    ; goto main (no return)
                                   (0523) ELSE
011D: 7C 0A C7 LCALL _main         (0524)     lcall _main                    ; call main
                                   (0525) .Exit:
0120: 8F FF    JMP   0x0120        (0526)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                   (0527) ENDIF
                                   (0528) ENDIF ; TOOLCHAIN
                                   (0529) 
                                   (0530)     ;---------------------------------
                                   (0531)     ; Library Access to Global Parms
                                   (0532)     ;---------------------------------
                                   (0533)     ;
                                   (0534)  bGetPowerSetting:
                                   (0535) _bGetPowerSetting:
                                   (0536)     ; Returns value of POWER_SETTING in the A register.
                                   (0537)     ; No inputs. No Side Effects.
                                   (0538)     ;
                                   (0539) IF (POWER_SETTING & POWER_SET_2V7)
                                   (0540)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                   (0541) ELSE
0122: 50 10    MOV   A,16          (0542)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                   (0543) ENDIF
0124: 7F       RET                 (0544)     ret
0125: 30       HALT  
0126: 30       HALT  
0127: 30       HALT  
0128: 30       HALT  
0129: 30       HALT  
012A: 30       HALT  
012B: 30       HALT  
012C: 30       HALT  
012D: 30       HALT  
012E: 30       HALT  
012F: 30       HALT  
0130: 30       HALT  
0131: 30       HALT  
0132: 30       HALT  
0133: 30       HALT  
0134: 30       HALT  
0135: 30       HALT  
0136: 30       HALT  
0137: 30       HALT  
0138: 30       HALT  
0139: 30       HALT  
013A: 30       HALT  
013B: 30       HALT  
013C: 30       HALT  
013D: 30       HALT  
013E: 30       HALT  
013F: 30       HALT  
0140: 30       HALT  
0141: 30       HALT  
0142: 30       HALT  
0143: 30       HALT  
0144: 30       HALT  
0145: 30       HALT  
0146: 30       HALT  
0147: 30       HALT  
0148: 30       HALT  
0149: 30       HALT  
014A: 30       HALT  
014B: 30       HALT  
014C: 30       HALT  
014D: 30       HALT  
014E: 30       HALT  
014F: 30       HALT  
0150: 4F       MOV   X,SP
0151: 00       SWI   
0152: 4E       SWAP  SP,A
0153: 00       SWI   
0154: 0A E3    ADC   A,[227]

FILE: lib\psocconfigtbl.asm
                                   (0001) ; Generated by PSoC Designer ???
                                   (0002) ;
                                   (0003) include "m8c.inc"
                                   (0004) ;  Personalization tables 
                                   (0005) export LoadConfigTBL_snesapu
                                   (0006) AREA psoc_config(rom, rel)
                                   (0007) LoadConfigTBL_snesapu:
                                   (0008) ;  Ordered Global Register values
0156: 71 10    OR    F,16          (0009) 	M8C_SetBank1
0158: 62 00 80 MOV   REG[0],128    (0010) 	mov	reg[00h], 80h		; Port_0_DriveMode_0 register (PRT0DM0)
015B: 62 01 7F MOV   REG[1],127    (0011) 	mov	reg[01h], 7fh		; Port_0_DriveMode_1 register (PRT0DM1)
015E: 70 EF    AND   F,239         (0012) 	M8C_SetBank0
0160: 62 03 7F MOV   REG[3],127    (0013) 	mov	reg[03h], 7fh		; Port_0_DriveMode_2 register (PRT0DM2)
0163: 62 02 00 MOV   REG[2],0      (0014) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0166: 71 10    OR    F,16          (0015) 	M8C_SetBank1
0168: 62 02 00 MOV   REG[2],0      (0016) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
016B: 62 03 00 MOV   REG[3],0      (0017) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
016E: 70 EF    AND   F,239         (0018) 	M8C_SetBank0
0170: 62 01 00 MOV   REG[1],0      (0019) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0173: 71 10    OR    F,16          (0020) 	M8C_SetBank1
0175: 62 04 10 MOV   REG[4],16     (0021) 	mov	reg[04h], 10h		; Port_1_DriveMode_0 register (PRT1DM0)
0178: 62 05 EF MOV   REG[5],239    (0022) 	mov	reg[05h], efh		; Port_1_DriveMode_1 register (PRT1DM1)
017B: 70 EF    AND   F,239         (0023) 	M8C_SetBank0
017D: 62 07 EB MOV   REG[7],235    (0024) 	mov	reg[07h], ebh		; Port_1_DriveMode_2 register (PRT1DM2)
0180: 62 06 14 MOV   REG[6],20     (0025) 	mov	reg[06h], 14h		; Port_1_GlobalSelect register (PRT1GS)
0183: 71 10    OR    F,16          (0026) 	M8C_SetBank1
0185: 62 06 00 MOV   REG[6],0      (0027) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0188: 62 07 00 MOV   REG[7],0      (0028) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
018B: 70 EF    AND   F,239         (0029) 	M8C_SetBank0
018D: 62 05 00 MOV   REG[5],0      (0030) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0190: 71 10    OR    F,16          (0031) 	M8C_SetBank1
0192: 62 08 00 MOV   REG[8],0      (0032) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0195: 62 09 FF MOV   REG[9],255    (0033) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0198: 70 EF    AND   F,239         (0034) 	M8C_SetBank0
019A: 62 0B FF MOV   REG[11],255   (0035) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
019D: 62 0A 00 MOV   REG[10],0     (0036) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01A0: 71 10    OR    F,16          (0037) 	M8C_SetBank1
01A2: 62 0A 00 MOV   REG[10],0     (0038) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
01A5: 62 0B 00 MOV   REG[11],0     (0039) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
01A8: 70 EF    AND   F,239         (0040) 	M8C_SetBank0
01AA: 62 09 00 MOV   REG[9],0      (0041) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
01AD: 71 10    OR    F,16          (0042) 	M8C_SetBank1
01AF: 62 0C 00 MOV   REG[12],0     (0043) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
01B2: 62 0D 00 MOV   REG[13],0     (0044) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
01B5: 70 EF    AND   F,239         (0045) 	M8C_SetBank0
01B7: 62 0F 00 MOV   REG[15],0     (0046) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
01BA: 62 0E 00 MOV   REG[14],0     (0047) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
01BD: 71 10    OR    F,16          (0048) 	M8C_SetBank1
01BF: 62 0E 00 MOV   REG[14],0     (0049) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
01C2: 62 0F 00 MOV   REG[15],0     (0050) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
01C5: 70 EF    AND   F,239         (0051) 	M8C_SetBank0
01C7: 62 0D 00 MOV   REG[13],0     (0052) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
01CA: 70 EF    AND   F,239         (0053) 	M8C_SetBank0
                                   (0054) ;  Global Register values
01CC: 62 60 09 MOV   REG[96],9     (0055) 	mov	reg[60h], 09h		; AnalogColumnInputSelect register (AMX_IN)
01CF: 62 64 00 MOV   REG[100],0    (0056) 	mov	reg[64h], 00h		; AnalogComparatorControl0 register (CMP_CR0)
01D2: 62 66 00 MOV   REG[102],0    (0057) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
01D5: 62 61 00 MOV   REG[97],0     (0058) 	mov	reg[61h], 00h		; AnalogMuxBusConfig register (AMUXCFG)
01D8: 62 E6 00 MOV   REG[230],0    (0059) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
01DB: 62 E7 00 MOV   REG[231],0    (0060) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
01DE: 62 D6 00 MOV   REG[214],0    (0061) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
01E1: 62 62 00 MOV   REG[98],0     (0062) 	mov	reg[62h], 00h		; PWM_Control register (PWM_CR)
01E4: 62 B0 20 MOV   REG[176],32   (0063) 	mov	reg[b0h], 20h		; Row_0_InputMux register (RDI0RI)
01E7: 62 B1 00 MOV   REG[177],0    (0064) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
01EA: 62 B2 00 MOV   REG[178],0    (0065) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
01ED: 62 B3 33 MOV   REG[179],51   (0066) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
01F0: 62 B4 33 MOV   REG[180],51   (0067) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
01F3: 62 B5 08 MOV   REG[181],8    (0068) 	mov	reg[b5h], 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
01F6: 62 B6 00 MOV   REG[182],0    (0069) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                   (0070) ;  Instance name LED_1, User Module LED
                                   (0071) ;  Instance name UART, User Module UART
                                   (0072) ;       Instance name UART, Block Name RX(DCB03)
01F9: 62 2F 00 MOV   REG[47],0     (0073) 	mov	reg[2fh], 00h		;UART_RX_CONTROL_REG(DCB03CR0)
01FC: 62 2D 00 MOV   REG[45],0     (0074) 	mov	reg[2dh], 00h		;UART_(DCB03DR1)
01FF: 62 2E 00 MOV   REG[46],0     (0075) 	mov	reg[2eh], 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                   (0076) ;       Instance name UART, Block Name TX(DCB02)
0202: 62 2B 00 MOV   REG[43],0     (0077) 	mov	reg[2bh], 00h		;UART_TX_CONTROL_REG(DCB02CR0)
0205: 62 29 00 MOV   REG[41],0     (0078) 	mov	reg[29h], 00h		;UART_TX_BUFFER_REG (DCB02DR1)
0208: 62 2A 00 MOV   REG[42],0     (0079) 	mov	reg[2ah], 00h		;UART_(DCB02DR2)
020B: 71 10    OR    F,16          (0080) 	M8C_SetBank1
                                   (0081) ;  Global Register values
020D: 62 61 00 MOV   REG[97],0     (0082) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
0210: 62 60 00 MOV   REG[96],0     (0083) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
0213: 62 62 00 MOV   REG[98],0     (0084) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
0216: 62 67 33 MOV   REG[103],51   (0085) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
0219: 62 64 00 MOV   REG[100],0    (0086) 	mov	reg[64h], 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
021C: 62 FD 00 MOV   REG[253],0    (0087) 	mov	reg[fdh], 00h		; DAC_Control register (DAC_CR)
021F: 62 D1 00 MOV   REG[209],0    (0088) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
0222: 62 D3 00 MOV   REG[211],0    (0089) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
0225: 62 D0 00 MOV   REG[208],0    (0090) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
0228: 62 D2 00 MOV   REG[210],0    (0091) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
022B: 62 E1 C0 MOV   REG[225],192  (0092) 	mov	reg[e1h], c0h		; OscillatorControl_1 register (OSC_CR1)
022E: 62 E2 00 MOV   REG[226],0    (0093) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
0231: 62 DF 19 MOV   REG[223],25   (0094) 	mov	reg[dfh], 19h		; OscillatorControl_3 register (OSC_CR3)
0234: 62 DE 00 MOV   REG[222],0    (0095) 	mov	reg[deh], 00h		; OscillatorControl_4 register (OSC_CR4)
0237: 62 DD 00 MOV   REG[221],0    (0096) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
023A: 62 D8 00 MOV   REG[216],0    (0097) 	mov	reg[d8h], 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
023D: 62 D9 00 MOV   REG[217],0    (0098) 	mov	reg[d9h], 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
0240: 62 DA 00 MOV   REG[218],0    (0099) 	mov	reg[dah], 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
0243: 62 DB 00 MOV   REG[219],0    (0100) 	mov	reg[dbh], 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                   (0101) ;  Instance name LED_1, User Module LED
                                   (0102) ;  Instance name UART, User Module UART
                                   (0103) ;       Instance name UART, Block Name RX(DCB03)
0246: 62 2C 05 MOV   REG[44],5     (0104) 	mov	reg[2ch], 05h		;UART_RX_FUNC_REG   (DCB03FN)
0249: 62 2D E1 MOV   REG[45],225   (0105) 	mov	reg[2dh], e1h		;UART_RX_INPUT_REG  (DCB03IN)
024C: 62 2E 40 MOV   REG[46],64    (0106) 	mov	reg[2eh], 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                   (0107) ;       Instance name UART, Block Name TX(DCB02)
024F: 62 28 0D MOV   REG[40],13    (0108) 	mov	reg[28h], 0dh		;UART_TX_FUNC_REG   (DCB02FN)
0252: 62 29 01 MOV   REG[41],1     (0109) 	mov	reg[29h], 01h		;UART_TX_INPUT_REG  (DCB02IN)
0255: 62 2A 44 MOV   REG[42],68    (0110) 	mov	reg[2ah], 44h		;UART_TX_OUTPUT_REG (DCB02OU)
0258: 70 EF    AND   F,239         (0111) 	M8C_SetBank0
025A: 7F       RET                 (0112) 	ret

FILE: lib\psocconfig.asm
                                   (0001) ; Generated by PSoC Designer ???
                                   (0002) ;
                                   (0003) ;==========================================================================
                                   (0004) ;  PSoCConfig.asm
                                   (0005) ;  @PSOC_VERSION
                                   (0006) ;
                                   (0007) ;  Version: 0.85
                                   (0008) ;  Revised: June 22, 2004
                                   (0009) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0010) ;
                                   (0011) ;  This file is generated by the Device Editor on Application Generation.
                                   (0012) ;  It contains code which loads the configuration data table generated in
                                   (0013) ;  the file PSoCConfigTBL.asm
                                   (0014) ;
                                   (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0016) ;  Edits to this file will not be preserved.
                                   (0017) ;==========================================================================
                                   (0018) ;
                                   (0019) include "m8c.inc"
                                   (0020) include "memory.inc"
                                   (0021) include "GlobalParams.inc"
                                   (0022) 
                                   (0023) export LoadConfigInit
                                   (0024) export _LoadConfigInit
                                   (0025) export LoadConfig_snesapu
                                   (0026) export _LoadConfig_snesapu
                                   (0027) export Port_0_Data_SHADE
                                   (0028) export _Port_0_Data_SHADE
                                   (0029) 
                                   (0030) 
                                   (0031) export NO_SHADOW
                                   (0032) export _NO_SHADOW
                                   (0033) 
                                   (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                   (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0036) 
                                   (0037) AREA psoc_config(rom, rel)
                                   (0038) 
                                   (0039) 
                                   (0040) ;---------------------------------------------------------------------------
                                   (0041) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                   (0042) ;                  parameters handled by boot code, like CPU speed). This
                                   (0043) ;                  function can be called from user code, but typically it
                                   (0044) ;                  is only called from boot.
                                   (0045) ;
                                   (0046) ;       INPUTS: None.
                                   (0047) ;      RETURNS: Nothing.
                                   (0048) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0049) ;               In the large memory model currently only the page
                                   (0050) ;               pointer registers listed below are modified.  This does
                                   (0051) ;               not guarantee that in future implementations of this
                                   (0052) ;               function other page pointer registers will not be
                                   (0053) ;               modified.
                                   (0054) ;          
                                   (0055) ;               Page Pointer Registers Modified: 
                                   (0056) ;               CUR_PP
                                   (0057) ;
                                   (0058) _LoadConfigInit:
                                   (0059)  LoadConfigInit:
                                   (0060)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0061)     
025B: 55 02 00 MOV   [2],0         (0062) 	mov		[Port_0_Data_SHADE], 0h
                                   (0063) 
025E: 7C 02 62 LCALL 0x0262        (0064) 	lcall	LoadConfig_snesapu
                                   (0065) 
                                   (0066) 
                                   (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
0261: 7F       RET                 (0068)     ret
                                   (0069) 
                                   (0070) ;---------------------------------------------------------------------------
                                   (0071) ; Load Configuration snesapu
                                   (0072) ;
                                   (0073) ;    Load configuration registers for snesapu.
                                   (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0075) ;
                                   (0076) ;       INPUTS: None.
                                   (0077) ;      RETURNS: Nothing.
                                   (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0079) ;               modified as may the Page Pointer registers!
                                   (0080) ;               In the large memory model currently only the page
                                   (0081) ;               pointer registers listed below are modified.  This does
                                   (0082) ;               not guarantee that in future implementations of this
                                   (0083) ;               function other page pointer registers will not be
                                   (0084) ;               modified.
                                   (0085) ;          
                                   (0086) ;               Page Pointer Registers Modified: 
                                   (0087) ;               CUR_PP
                                   (0088) ;
                                   (0089) _LoadConfig_snesapu:
                                   (0090)  LoadConfig_snesapu:
                                   (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
0262: 7C 01 56 LCALL 0x0156        (0092)     lcall   LoadConfigTBL_snesapu            ; Call load config table routine
                                   (0093) 
                                   (0094) 
0265: 70 EF    AND   F,239         (0095)     M8C_SetBank0                    ; Force return to bank 0
                                   (0096)     RAM_EPILOGUE RAM_USE_CLASS_4
0267: 7F       RET                 (0097)     ret

FILE: lib\uartint.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   UARTINT.asm
                                   (0004) ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
                                   (0005) ;;  Generated by PSoC Designer ???
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0008) ;;-----------------------------------------------------------------------------
                                   (0009) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0010) ;;*****************************************************************************
                                   (0011) ;;*****************************************************************************
                                   (0012) 
                                   (0013) 
                                   (0014) include "UART.inc"
                                   (0015) include "memory.inc"
                                   (0016) include "m8c.inc"
                                   (0017) 
                                   (0018) ;-----------------------------------------------
                                   (0019) ;  Global Symbols
                                   (0020) ;-----------------------------------------------
                                   (0021) export  _UART_TX_ISR
                                   (0022) export  _UART_RX_ISR
                                   (0023) 
                                   (0024) IF (UART_RXBUF_ENABLE)
                                   (0025) export  UART_aRxBuffer
                                   (0026) export _UART_aRxBuffer
                                   (0027) export  UART_bRxCnt
                                   (0028) export _UART_bRxCnt
                                   (0029) export  UART_fStatus
                                   (0030) export _UART_fStatus
                                   (0031) ENDIF
                                   (0032) 
                                   (0033) 
                                   (0034) ;-----------------------------------------------
                                   (0035) ; Variable Allocation
                                   (0036) ;-----------------------------------------------
                                   (0037) AREA InterruptRAM (RAM, REL, CON)
                                   (0038) 
                                   (0039) IF (UART_RXBUF_ENABLE)
                                   (0040)  UART_fStatus:
                                   (0041) _UART_fStatus:      BLK  1
                                   (0042)  UART_bRxCnt:
                                   (0043) _UART_bRxCnt:       BLK  1
                                   (0044) AREA UART_RAM (RAM, REL, CON)
                                   (0045)  UART_aRxBuffer:
                                   (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                   (0047) ENDIF
                                   (0048) 
                                   (0049) AREA InterruptRAM (RAM, REL, CON)
                                   (0050) 
                                   (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0052) ;---------------------------------------------------
                                   (0053) ; Insert your custom declarations below this banner
                                   (0054) ;---------------------------------------------------
                                   (0055) 
                                   (0056) ;------------------------
                                   (0057) ;  Includes
                                   (0058) ;------------------------
                                   (0059) 
                                   (0060) 
                                   (0061) ;------------------------
                                   (0062) ;  Constant Definitions
                                   (0063) ;------------------------
                                   (0064) 
                                   (0065) 
                                   (0066) ;------------------------
                                   (0067) ; Variable Allocation
                                   (0068) ;------------------------
                                   (0069) 
                                   (0070) 
                                   (0071) ;---------------------------------------------------
                                   (0072) ; Insert your custom declarations above this banner
                                   (0073) ;---------------------------------------------------
                                   (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0075) 
                                   (0076) 
                                   (0077) AREA UserModules (ROM, REL, CON)
                                   (0078) 
                                   (0079) ;-----------------------------------------------------------------------------
                                   (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                   (0081) ;
                                   (0082) ;  DESCRIPTION:
                                   (0083) ;     UART TX interrupt handler for instance UART.
                                   (0084) ;
                                   (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0086) ;     handler for this function, then place code where specified.
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) 
                                   (0089) _UART_TX_ISR:
                                   (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                   (0091)    ;---------------------------------------------------
                                   (0092)    ; Insert your custom code below this banner
                                   (0093)    ;---------------------------------------------------
                                   (0094)    ;   NOTE: interrupt service routines must preserve
                                   (0095)    ;   the values of the A and X CPU registers.
                                   (0096)    
                                   (0097)    ;---------------------------------------------------
                                   (0098)    ; Insert your custom code above this banner
                                   (0099)    ;---------------------------------------------------
                                   (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
0268: 7E       RETI                (0101)    reti
                                   (0102) 
                                   (0103) 
                                   (0104) ;-----------------------------------------------------------------------------
                                   (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                   (0106) ;
                                   (0107) ;  DESCRIPTION:
                                   (0108) ;     UART RX interrupt handler for instance UART.
                                   (0109) ;     This ISR handles the background processing of received characters if
                                   (0110) ;     the buffer is enabled.
                                   (0111) ;
                                   (0112) ;
                                   (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0114) ;
                                   (0115) ;  SIDE EFFECTS:
                                   (0116) ;     There are 3 posible errors that may occur with the serial port.
                                   (0117) ;      1) Parity Error
                                   (0118) ;      2) Framing Error
                                   (0119) ;      3) OverRun Error
                                   (0120) ;
                                   (0121) ;  This user module check for parity and framing error.  If either of these
                                   (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                   (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                   (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                   (0125) ;  this ISR to set a flag if an error condition occurs.
                                   (0126) ;
                                   (0127) ;  THEORY of OPERATION:
                                   (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                   (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                   (0130) ;     the command terminator is detected, the command bit is set and all other
                                   (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0133) ;     terminator.  After that, the characters will be discarded, although
                                   (0134) ;     a command determinator will still cause the command bit to be set.
                                   (0135) ;
                                   (0136) ;-----------------------------------------------------------------------------
                                   (0137) _UART_RX_ISR:
                                   (0138) 
                                   (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0140)    ;---------------------------------------------------
                                   (0141)    ; Insert your custom code below this banner
                                   (0142)    ;---------------------------------------------------
                                   (0143)    ;   NOTE: interrupt service routines must preserve
                                   (0144)    ;   the values of the A and X CPU registers.
                                   (0145) 
                                   (0146)    ;---------------------------------------------------
                                   (0147)    ; Insert your custom code above this banner
                                   (0148)    ;---------------------------------------------------
                                   (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0150) 
                                   (0151) IF (UART_RXBUF_ENABLE)
0269: 08       PUSH  A             (0152)    push A
026A: 10       PUSH  X             (0153)    push X
026B: 5D D3    MOV   A,REG[211]
                                   (0154)    
                                   (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
026D: 08       PUSH  A             (0156)       REG_PRESERVE IDX_PP
                                   (0157)    ENDIF
                                   (0158)    
026E: 58 01    MOV   X,[1]         (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0270: 5D 2F    MOV   A,REG[47]     (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0272: 08       PUSH  A             (0161)    push A                                                  ; Store copy for later test
                                   (0162)                                                            ; IF real RX interrupt
0273: 21 08    AND   A,8           (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0275: B0 04    JNZ   0x027A        (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0277: 18       POP   A             (0165)    pop  A                                                  ; Restore stack
0278: 80 5E    JMP   0x02D7        (0166)    jmp  .RESTORE_IDX_PP
                                   (0167) 
                                   (0168) .UARTRX_ReadRx:
027A: 18       POP   A             (0169)    pop  A                                                  ; Restore status flags
                                   (0170)                                                            ; IF there is no error, get data
                                   (0171)                                                            ; Check for parity or framing error
027B: 21 E0    AND   A,224         (0172)    and  A,UART_RX_ERROR
027D: A0 12    JZ    0x0290        (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                   (0174) 
027F: 2C 00    OR    [0],A         (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0281: 49 2E 00 TST   REG[46],0     (0176)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0284: 21 20    AND   A,32          (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
0286: A0 50    JZ    0x02D7        (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                   (0179) 
                                   (0180)                                                            ; Disable and re-enable RX to reset after
                                   (0181)                                                            ; framing error.
0288: 41 2F FE AND   REG[47],254   (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
028B: 43 2F 01 OR    REG[47],1     (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
028E: 80 48    JMP   0x02D7        (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                   (0185) 
                                   (0186) 
                                   (0187) .UARTRX_NO_ERROR:
0290: 5D 2E    MOV   A,REG[46]     (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                   (0189) 
                                   (0190)                                                            ; IF buffer not full
0292: 47 00 01 TST   [0],1         (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
0295: B0 41    JNZ   0x02D7        (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                   (0193) 
0297: 39 0D    CMP   A,13          (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0299: B0 14    JNZ   0x02AE        (0195)    jnz  .UARTRX_CHK_BACKSPACE
029B: 2E 00 01 OR    [0],1         (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                   (0197) 
                                   (0198) 
                                   (0199) 
029E: 62 D3 00 MOV   REG[211],0    (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
02A1: 70 3F    AND   F,63
02A3: 71 80    OR    F,128         (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02A5: 56 03 00 MOV   [X+3],0       (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
02A8: 70 3F    AND   F,63
02AA: 71 00    OR    F,0           (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02AC: 80 2A    JMP   0x02D7        (0204)    jmp  .RESTORE_IDX_PP
                                   (0205) 
                                   (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                   (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                   (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                   (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                   (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                   (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                   (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                   (0213)    jmp  .RESTORE_IDX_PP
                                   (0214) ENDIF                                                      ; 
                                   (0215) 
                                   (0216) .UARTRX_IGNORE:
                                   (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
02AE: 39 20    CMP   A,32          (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
02B0: C0 26    JC    0x02D7        (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                   (0220) ENDIF
                                   (0221) 
                                   (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                   (0223) 	
02B2: 62 D3 00 MOV   REG[211],0    (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
02B5: 3C 01 0F CMP   [1],15        (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
02B8: C0 11    JC    0x02CA        (0226)    jc   .UARTRX_ISR_GETDATA
02BA: 70 3F    AND   F,63
02BC: 71 80    OR    F,128         (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02BE: 56 03 00 MOV   [X+3],0       (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
02C1: 70 3F    AND   F,63
02C3: 71 00    OR    F,0           (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02C5: 2E 00 10 OR    [0],16        (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
02C8: 80 0E    JMP   0x02D7        (0231)    jmp  .RESTORE_IDX_PP
02CA: 70 3F    AND   F,63
                                   (0232) 
                                   (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                   (0234)                                                            ; X is already loaded with pointer
02CC: 71 80    OR    F,128         (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02CE: 54 03    MOV   [X+3],A       (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
02D0: 70 3F    AND   F,63
02D2: 71 00    OR    F,0           (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02D4: 75       INC   X             (0238)    inc  X                                                  ; Inc the pointer
02D5: 5A 01    MOV   [1],X         (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
02D7: 18       POP   A
                                   (0240)                                                            ; ENDIF max string size
                                   (0241) .RESTORE_IDX_PP:
                                   (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
02D8: 60 D3    MOV   REG[211],A    (0243)       REG_RESTORE IDX_PP
                                   (0244)    ENDIF
                                   (0245) 
                                   (0246) .END_UARTRX_ISR:
02DA: 20       POP   X             (0247)    pop  X
02DB: 18       POP   A             (0248)    pop  A
                                   (0249) 
                                   (0250) ENDIF
                                   (0251) 
                                   (0252) UART_RX_ISR_END:
02DC: 7E       RETI                (0253)    reti

FILE: lib\uart.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  Filename:   UART.asm
                                   (0004) ;;  Version: 5.2, Updated on 2008/6/23 at 12:26:23
                                   (0005) ;;  Generated by PSoC Designer ???
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0008) ;;                22/24/25/26/27xxx families.
                                   (0009) ;;
                                   (0010) ;;
                                   (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0013) ;;        This means it is the caller's responsibility to preserve any values
                                   (0014) ;;        in the X and A registers that are still needed after the API functions
                                   (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0019) ;;-----------------------------------------------------------------------------
                                   (0020) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0021) ;;*****************************************************************************
                                   (0022) ;;*****************************************************************************
                                   (0023) 
                                   (0024) 
                                   (0025) include "m8c.inc"
                                   (0026) include "memory.inc"
                                   (0027) include "UART.inc"
                                   (0028) 
                                   (0029) ;-----------------------------------------------
                                   (0030) ;  Global Symbols
                                   (0031) ;-----------------------------------------------
                                   (0032) ;-------------------------------------------------------------------
                                   (0033) ;  Declare the functions global for both assembler and C compiler.
                                   (0034) ;
                                   (0035) ;  Note that there are two names for each API. First name is
                                   (0036) ;  assembler reference. Name with underscore is name refence for
                                   (0037) ;  C compiler.  Calling function in C source code does not require
                                   (0038) ;  the underscore.
                                   (0039) ;-------------------------------------------------------------------
                                   (0040) export  UART_SetTxIntMode
                                   (0041) export _UART_SetTxIntMode
                                   (0042) export  UART_EnableInt
                                   (0043) export _UART_EnableInt
                                   (0044) export  UART_DisableInt
                                   (0045) export _UART_DisableInt
                                   (0046) 
                                   (0047) export  UART_Start
                                   (0048) export _UART_Start
                                   (0049) export  UART_Stop
                                   (0050) export _UART_Stop
                                   (0051) export  UART_SendData
                                   (0052) export _UART_SendData
                                   (0053) export  UART_bReadTxStatus
                                   (0054) export _UART_bReadTxStatus
                                   (0055) export  UART_bReadRxData
                                   (0056) export _UART_bReadRxData
                                   (0057) export  UART_bReadRxStatus
                                   (0058) export _UART_bReadRxStatus
                                   (0059) 
                                   (0060) export  UART_IntCntl
                                   (0061) export _UART_IntCntl
                                   (0062) 
                                   (0063) export  UART_TxIntMode
                                   (0064) export _UART_TxIntMode
                                   (0065) 
                                   (0066) export  UART_PutSHexByte
                                   (0067) export _UART_PutSHexByte
                                   (0068) export  UART_PutSHexInt
                                   (0069) export _UART_PutSHexInt
                                   (0070) 
                                   (0071) export  UART_CPutString
                                   (0072) export _UART_CPutString
                                   (0073) export  UART_PutString
                                   (0074) export _UART_PutString
                                   (0075) export  UART_PutChar
                                   (0076) export _UART_PutChar
                                   (0077) export  UART_Write
                                   (0078) export _UART_Write
                                   (0079) export  UART_CWrite
                                   (0080) export _UART_CWrite
                                   (0081) 
                                   (0082) export  UART_cGetChar
                                   (0083) export _UART_cGetChar
                                   (0084) export  UART_cReadChar
                                   (0085) export _UART_cReadChar
                                   (0086) export  UART_iReadChar
                                   (0087) export _UART_iReadChar
                                   (0088) export  UART_PutCRLF
                                   (0089) export _UART_PutCRLF
                                   (0090) 
                                   (0091) IF (UART_RXBUF_ENABLE)
                                   (0092) export  UART_CmdReset
                                   (0093) export _UART_CmdReset
                                   (0094) export  UART_bCmdCheck
                                   (0095) export _UART_bCmdCheck
                                   (0096) export  UART_bCmdLength
                                   (0097) export _UART_bCmdLength
                                   (0098) export  UART_bErrCheck
                                   (0099) export _UART_bErrCheck
                                   (0100) 
                                   (0101) export  UART_szGetParam
                                   (0102) export _UART_szGetParam
                                   (0103) export  UART_szGetRestOfParams
                                   (0104) export _UART_szGetRestOfParams
                                   (0105) ENDIF
                                   (0106) 
                                   (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0108) ; WARNING WARNING WARNING
                                   (0109) ; The following exports are for backwards compatibility only and should
                                   (0110) ; not be used for new designs. They may be eliminated in a future release.
                                   (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                   (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0113) export  bUART_ReadTxStatus
                                   (0114) export _bUART_ReadTxStatus
                                   (0115) export  bUART_ReadRxData
                                   (0116) export _bUART_ReadRxData
                                   (0117) export  bUART_ReadRxStatus
                                   (0118) export _bUART_ReadRxStatus
                                   (0119) 	
                                   (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0121) ;             END WARNING
                                   (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0123) 
                                   (0124) ;-----------------------------------------------
                                   (0125) ; Variable Allocation
                                   (0126) ;-----------------------------------------------
                                   (0127) IF (UART_RXBUF_ENABLE)
                                   (0128)     
                                   (0129) area UART_RAM (RAM, REL, CON)
                                   (0130)     
                                   (0131)  ptrParam:   BLK  1
                                   (0132) 
                                   (0133) ENDIF
                                   (0134) 
                                   (0135) area text (ROM,REL)
                                   (0136) 
                                   (0137) ;-----------------------------------------------
                                   (0138) ;  EQUATES
                                   (0139) ;-----------------------------------------------
                                   (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0142) 
                                   (0143) area UserModules (ROM, REL, CON)
                                   (0144) 
                                   (0145) ;=============================================================================
                                   (0146) ;=============================================================================
                                   (0147) ;
                                   (0148) ;     Low-Level Commands
                                   (0149) ;
                                   (0150) ;=============================================================================
                                   (0151) ;=============================================================================
                                   (0152) 
                                   (0153) .SECTION
                                   (0154) ;-----------------------------------------------------------------------------
                                   (0155) ;  FUNCTION NAME: UART_EnableInt
                                   (0156) ;
                                   (0157) ;  DESCRIPTION:
                                   (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0159) ;     bit associated with this User Module. Remember to call the global
                                   (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0161) ;-----------------------------------------------------------------------------
                                   (0162) ;
                                   (0163) ;  ARGUMENTS:
                                   (0164) ;     none.
                                   (0165) ;
                                   (0166) ;  RETURNS:
                                   (0167) ;     none.
                                   (0168) ;
                                   (0169) ;  SIDE EFFECTS:
                                   (0170) ;    The A and X registers may be modified by this or future implementations
                                   (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0174) ;    functions.
                                   (0175) ;
                                   (0176)  UART_EnableInt:
                                   (0177) _UART_EnableInt:
                                   (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
02DD: 43 E1 04 OR    REG[225],4    (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
02E0: 43 E1 08 OR    REG[225],8    (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
02E3: 7F       RET                 (0182)    ret
                                   (0183) .ENDSECTION
                                   (0184) 
                                   (0185)     
                                   (0186) .SECTION
                                   (0187) ;-----------------------------------------------------------------------------
                                   (0188) ;  FUNCTION NAME: UART_DisableInt
                                   (0189) ;
                                   (0190) ;  DESCRIPTION:
                                   (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0192) ;     associated with this User Module.
                                   (0193) ;-----------------------------------------------------------------------------
                                   (0194) ;
                                   (0195) ;  ARGUMENTS:
                                   (0196) ;     none.
                                   (0197) ;
                                   (0198) ;  RETURNS:
                                   (0199) ;     none.
                                   (0200) ;
                                   (0201) ;  SIDE EFFECTS:
                                   (0202) ;    The A and X registers may be modified by this or future implementations
                                   (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0206) ;    functions.
                                   (0207) ;
                                   (0208)  UART_DisableInt:
                                   (0209) _UART_DisableInt:
                                   (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
02E4: 41 E1 FB AND   REG[225],251  (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
02E7: 41 E1 F7 AND   REG[225],247  (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
02EA: 7F       RET                 (0214)    ret
                                   (0215) .ENDSECTION
                                   (0216) 
                                   (0217) 
                                   (0218) .SECTION
                                   (0219) ;-----------------------------------------------------------------------------
                                   (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                   (0221) ;
                                   (0222) ;  DESCRIPTION:
                                   (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS:
                                   (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0228) ;        Passed in the A register
                                   (0229) ;
                                   (0230) ;  RETURNS:
                                   (0231) ;     none.
                                   (0232) ;
                                   (0233) ;  SIDE EFFECTS:
                                   (0234) ;    The A and X registers may be modified by this or future implementations
                                   (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0238) ;    functions.
                                   (0239) ;
                                   (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0242) ;     on TX register empty or TX transmit complete
                                   (0243) ;
                                   (0244)  UART_SetTxIntMode:
                                   (0245) _UART_SetTxIntMode:
                                   (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
02EB: 71 10    OR    F,16          (0247)    M8C_SetBank1
02ED: 21 01    AND   A,1           (0248)    and   A, UART_INT_MODE_TX_COMPLETE
02EF: A0 07    JZ    0x02F7        (0249)    jz    .SetModeRegEmpty
02F1: 43 28 10 OR    REG[40],16    (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
02F4: 70 EF    AND   F,239         (0251)    M8C_SetBank0
                                   (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
02F6: 7F       RET                 (0253)    ret
                                   (0254) 
                                   (0255) .SetModeRegEmpty:
02F7: 41 28 EF AND   REG[40],239   (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
02FA: 70 EF    AND   F,239         (0257)    M8C_SetBank0
                                   (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
02FC: 7F       RET                 (0259)    ret
                                   (0260) .ENDSECTION
                                   (0261) 
                                   (0262) 
                                   (0263) .SECTION
                                   (0264) ;-----------------------------------------------------------------------------
                                   (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                   (0266) ;
                                   (0267) ;  DESCRIPTION:
                                   (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0269) ;-----------------------------------------------------------------------------
                                   (0270) ;
                                   (0271) ;  ARGUMENTS:
                                   (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0273) ;        Passed in the A register.
                                   (0274) ;
                                   (0275) ;  RETURNS:
                                   (0276) ;     none.
                                   (0277) ;
                                   (0278) ;  SIDE EFFECTS:
                                   (0279) ;    The A and X registers may be modified by this or future implementations
                                   (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0283) ;    functions.
                                   (0284) ;
                                   (0285)  UART_Start:
                                   (0286) _UART_Start:
                                   (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0289) 
02FD: 29 01    OR    A,1           (0290)    or    A, bfCONTROL_REG_START_BIT
02FF: 60 2B    MOV   REG[43],A     (0291)    mov   REG[UART_TX_CONTROL_REG], A
0301: 60 2F    MOV   REG[47],A     (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                   (0293) IF ( UART_RXBUF_ENABLE )
0303: 91 2A    CALL  0x042F        (0294)    call  _UART_CmdReset
                                   (0295) ENDIF
                                   (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0305: 7F       RET                 (0297)    ret
                                   (0298) .ENDSECTION
                                   (0299) 
                                   (0300) 
                                   (0301) .SECTION
                                   (0302) ;-----------------------------------------------------------------------------
                                   (0303) ;  FUNCTION NAME: UART_Stop
                                   (0304) ;
                                   (0305) ;  DESCRIPTION:
                                   (0306) ;     Disables UART operation.
                                   (0307) ;-----------------------------------------------------------------------------
                                   (0308) ;
                                   (0309) ;  ARGUMENTS:
                                   (0310) ;     none.
                                   (0311) ;
                                   (0312) ;  RETURNS:
                                   (0313) ;     none.
                                   (0314) ;
                                   (0315) ;  SIDE EFFECTS:
                                   (0316) ;    The A and X registers may be modified by this or future implementations
                                   (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0320) ;    functions.
                                   (0321) ;
                                   (0322)  UART_Stop:
                                   (0323) _UART_Stop:
                                   (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0306: 41 2B FE AND   REG[43],254   (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0309: 41 2F FE AND   REG[47],254   (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
030C: 7F       RET                 (0328)    ret
                                   (0329) .ENDSECTION
                                   (0330) 
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: UART_SendData
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Initiates a transmission of data.
                                   (0338) ;-----------------------------------------------------------------------------
                                   (0339) ;
                                   (0340) ;  ARGUMENTS:
                                   (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0342) ;
                                   (0343) ;  RETURNS:
                                   (0344) ;     none.
                                   (0345) ;
                                   (0346) ;  SIDE EFFECTS:
                                   (0347) ;    The A and X registers may be modified by this or future implementations
                                   (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0351) ;    functions.
                                   (0352) ;
                                   (0353)  UART_SendData:
                                   (0354) _UART_SendData:
                                   (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
030D: 60 29    MOV   REG[41],A     (0356)    mov REG[UART_TX_BUFFER_REG], A
                                   (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
030F: 7F       RET                 (0358)    ret
                                   (0359) .ENDSECTION
                                   (0360) 
                                   (0361) 
                                   (0362) .SECTION
                                   (0363) ;-----------------------------------------------------------------------------
                                   (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                   (0365) ;
                                   (0366) ;  DESCRIPTION:
                                   (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0368) ;-----------------------------------------------------------------------------
                                   (0369) ;
                                   (0370) ;  ARGUMENTS:
                                   (0371) ;     none.
                                   (0372) ;
                                   (0373) ;  RETURNS:
                                   (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0375) ;           status bits (returned in A)
                                   (0376) ;
                                   (0377) ;  SIDE EFFECTS:
                                   (0378) ;    The A and X registers may be modified by this or future implementations
                                   (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0382) ;    functions.
                                   (0383) ;
                                   (0384)  UART_bReadTxStatus:
                                   (0385) _UART_bReadTxStatus:
                                   (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0310: 5D 2B    MOV   A,REG[43]     (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                   (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0312: 7F       RET                 (0391)    ret
                                   (0392) .ENDSECTION
                                   (0393) 
                                   (0394) 
                                   (0395) .SECTION
                                   (0396) ;-----------------------------------------------------------------------------
                                   (0397) ;  FUNCTION NAME: UART_bReadRxData
                                   (0398) ;
                                   (0399) ;  DESCRIPTION:
                                   (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0401) ;     sure data is valid.
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;
                                   (0404) ;  ARGUMENTS:
                                   (0405) ;     none.
                                   (0406) ;
                                   (0407) ;  RETURNS:
                                   (0408) ;     bRxData - returned in A.
                                   (0409) ;
                                   (0410) ;  SIDE EFFECTS:
                                   (0411) ;    The A and X registers may be modified by this or future implementations
                                   (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0415) ;    functions.
                                   (0416) ;
                                   (0417)  UART_bReadRxData:
                                   (0418) _UART_bReadRxData:
                                   (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0313: 5D 2E    MOV   A,REG[46]     (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                   (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0315: 7F       RET                 (0424)    ret
                                   (0425) .ENDSECTION
                                   (0426) 
                                   (0427) 
                                   (0428) .SECTION
                                   (0429) ;-----------------------------------------------------------------------------
                                   (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                   (0431) ;
                                   (0432) ;  DESCRIPTION:
                                   (0433) ;     Reads the RX Status bits in the Control/Status register.
                                   (0434) ;-----------------------------------------------------------------------------
                                   (0435) ;
                                   (0436) ;  ARGUMENTS:
                                   (0437) ;     none.
                                   (0438) ;
                                   (0439) ;  RETURNS:
                                   (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0442) ;           returned in A.
                                   (0443) ;
                                   (0444) ;  SIDE EFFECTS:
                                   (0445) ;    The A and X registers may be modified by this or future implementations
                                   (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0449) ;    functions.
                                   (0450) ;
                                   (0451)  UART_bReadRxStatus:
                                   (0452) _UART_bReadRxStatus:
                                   (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0316: 5D 2F    MOV   A,REG[47]     (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                   (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0318: 7F       RET                 (0458)    ret
                                   (0459) .ENDSECTION
                                   (0460) 
                                   (0461) 
                                   (0462) .SECTION
                                   (0463) ;-----------------------------------------------------------------------------
                                   (0464) ;  FUNCTION NAME: UART_TxIntMode
                                   (0465) ;
                                   (0466) ;  DESCRIPTION:
                                   (0467) ;     This function is used to change the TX Interrupt mode.
                                   (0468) ;-----------------------------------------------------------------------------
                                   (0469) ;
                                   (0470) ;  ARGUMENTS:
                                   (0471) ;     A => Tx Interrupt mode
                                   (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0473) ;             1 => Interrupt on TX Complete
                                   (0474) ;
                                   (0475) ;  RETURNS:
                                   (0476) ;     none.
                                   (0477) ;
                                   (0478) ;  SIDE EFFECTS:
                                   (0479) ;    The A and X registers may be modified by this or future implementations
                                   (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0483) ;    functions.
                                   (0484) ;
                                   (0485)  UART_TxIntMode:
                                   (0486) _UART_TxIntMode:
                                   (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0488) 
0319: 21 01    AND   A,1           (0489)    and  A,UART_INT_MODE_TX_COMPLETE
031B: 71 10    OR    F,16          (0490)    M8C_SetBank1
031D: 39 01    CMP   A,1           (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
031F: A0 06    JZ    0x0326        (0492)    jz   .SetTxCmpMode
                                   (0493) 
0321: 41 28 EF AND   REG[40],239   (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0324: 80 04    JMP   0x0329        (0495)    jmp  .TxIntMode_End
                                   (0496) 
                                   (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0326: 43 28 10 OR    REG[40],16    (0498)    or   reg[UART_TX_FUNC_REG],0x10
                                   (0499) 
                                   (0500) .TxIntMode_End:
0329: 70 EF    AND   F,239         (0501)    M8C_SetBank0
                                   (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
032B: 7F       RET                 (0503)    ret
                                   (0504) .ENDSECTION
                                   (0505) 
                                   (0506)     
                                   (0507) .SECTION
                                   (0508) ;-----------------------------------------------------------------------------
                                   (0509) ;  FUNCTION NAME: UART_IntCntl
                                   (0510) ;
                                   (0511) ;  DESCRIPTION:
                                   (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0513) ;-----------------------------------------------------------------------------
                                   (0514) ;
                                   (0515) ;  ARGUMENTS:
                                   (0516) ;     A => Interrupt mask
                                   (0517) ;
                                   (0518) ;  RETURNS:
                                   (0519) ;     none.
                                   (0520) ;
                                   (0521) ;  SIDE EFFECTS:
                                   (0522) ;    The A and X registers may be modified by this or future implementations
                                   (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0526) ;    functions.
                                   (0527) ;
                                   (0528) ;  THEORY of OPERATION or PROCEDURE:
                                   (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0530) ;     and RX block.
                                   (0531) ;
                                   (0532)  UART_IntCntl:
                                   (0533) _UART_IntCntl:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535) 
032C: 08       PUSH  A             (0536)    push A
032D: 21 01    AND   A,1           (0537)    and  A,UART_ENABLE_RX_INT
032F: A0 06    JZ    0x0336        (0538)    jz   .DisRxInt
                                   (0539)      ; Enable Rx Interrupt
0331: 43 E1 08 OR    REG[225],8    (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0334: 80 04    JMP   0x0339        (0541)    jmp  .CheckTxInt
                                   (0542) .DisRxInt:
                                   (0543)      ; Disable Rx Interrupt
0336: 41 E1 F7 AND   REG[225],247  (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0545) 
                                   (0546) .CheckTxInt:
0339: 18       POP   A             (0547)    pop  A
033A: 21 02    AND   A,2           (0548)    and  A,UART_ENABLE_TX_INT
033C: A0 06    JZ    0x0343        (0549)    jz   .DisTxInt
                                   (0550)      ; Enable Tx Interrupt
033E: 43 E1 04 OR    REG[225],4    (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0341: 80 04    JMP   0x0346        (0552)    jmp  .End_IntCntl
                                   (0553) .DisTxInt:
                                   (0554)      ; Disable Tx Interrupt
0343: 41 E1 FB AND   REG[225],251  (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                   (0556) 
                                   (0557) .End_IntCntl:
                                   (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0346: 7F       RET                 (0559)    ret
0347: 30       HALT  
0348: 31 32    XOR   A,50
034A: 33 34    XOR   A,[X+52]
034C: 35 36    XOR   [X+54],A
034E: 37 38 39 XOR   [X+56],57
0351: 41 42 43 AND   REG[66],67
0354: 44 45 46 OR    REG[X+69],70
                                   (0560) .ENDSECTION
                                   (0561) 
                                   (0562) 
                                   (0563) ;=============================================================================
                                   (0564) ;=============================================================================
                                   (0565) ;
                                   (0566) ;     High-Level Commands
                                   (0567) ;
                                   (0568) ;=============================================================================
                                   (0569) ;=============================================================================
                                   (0570) 
                                   (0571) 
                                   (0572) ;-----------------------------------------------------------------------------
                                   (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                   (0574) ;
                                   (0575) ;  DESCRIPTION:
                                   (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0577) ;-----------------------------------------------------------------------------
                                   (0578) ;
                                   (0579) ;  ARGUMENTS:
                                   (0580) ;     A  => (BYTE) Data/char to be printed
                                   (0581) ;
                                   (0582) ;  RETURNS:
                                   (0583) ;     none.
                                   (0584) ;
                                   (0585) ;  SIDE EFFECTS:
                                   (0586) ;    The A and X registers may be modified by this or future implementations
                                   (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0590) ;    functions.
                                   (0591) ;
                                   (0592) .LITERAL
                                   (0593) UART_HEX_STR:
                                   (0594)      DS    "0123456789ABCDEF"
                                   (0595) .ENDLITERAL
                                   (0596) 
                                   (0597) .SECTION
                                   (0598)  UART_PutSHexByte:
                                   (0599) _UART_PutSHexByte:
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0357: 08       PUSH  A             (0601)    push  A                             ; Save lower nibble
0358: 67       ASR   A             (0602)    asr   A                             ; Shift high nibble to right
0359: 67       ASR   A             (0603)    asr   A
035A: 67       ASR   A             (0604)    asr   A
035B: 67       ASR   A             (0605)    asr   A
035C: 21 0F    AND   A,15          (0606)    and   A,0Fh                         ; Mask off nibble
035E: FF E7    INDEX 0x0347        (0607)    index UART_HEX_STR                  ; Get Hex value
0360: 90 0F    CALL  0x0371        (0608)    call  UART_PutChar                  ; Write data to screen
0362: 18       POP   A             (0609)    pop   A                             ; Restore value
0363: 21 0F    AND   A,15          (0610)    and   A,0Fh                         ; Mask off lower nibble
0365: FF E0    INDEX 0x0347        (0611)    index UART_HEX_STR                  ; Get Hex value
0367: 90 08    CALL  0x0371        (0612)    call  UART_PutChar                  ; Write data to screen
                                   (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0369: 7F       RET                 (0614)    ret
                                   (0615) .ENDSECTION
                                   (0616) 
                                   (0617) 
                                   (0618) .SECTION
                                   (0619) ;-----------------------------------------------------------------------------
                                   (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                   (0621) ;
                                   (0622) ;  DESCRIPTION:
                                   (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0624) ;-----------------------------------------------------------------------------
                                   (0625) ;
                                   (0626) ;  ARGUMENTS:
                                   (0627) ;     Pointer to string
                                   (0628) ;     A  => ASB of Int
                                   (0629) ;     X  => MSB of Int
                                   (0630) ;
                                   (0631) ;  RETURNS:
                                   (0632) ;     none.
                                   (0633) ;
                                   (0634) ;  SIDE EFFECTS:
                                   (0635) ;    The A and X registers may be modified by this or future implementations
                                   (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0639) ;    functions.
                                   (0640) ;
                                   (0641) 
                                   (0642)  UART_PutSHexInt:
                                   (0643) _UART_PutSHexInt:
                                   (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
036A: 4B       SWAP  A,X           (0645)    swap  A,X
036B: 9F EA    CALL  0x0357        (0646)    call  UART_PutSHexByte              ; Print MSB
036D: 5B       MOV   A,X           (0647)    mov   A,X                           ; Move LSB into position
036E: 9F E7    CALL  0x0357        (0648)    call  UART_PutSHexByte              ; Print LSB
                                   (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0370: 7F       RET                 (0650)    ret
0371: 49 2B 10 TST   REG[43],16
                                   (0651) .ENDSECTION
                                   (0652) 
                                   (0653) 
                                   (0654) .SECTION
                                   (0655) ;-----------------------------------------------------------------------------
                                   (0656) ;  FUNCTION NAME: UART_PutChar
                                   (0657) ;
                                   (0658) ;  DESCRIPTION:
                                   (0659) ;     Send character out through UART TX port.
                                   (0660) ;-----------------------------------------------------------------------------
                                   (0661) ;
                                   (0662) ;  ARGUMENTS:
                                   (0663) ;     A has Character to send to UART Tx Port
                                   (0664) ;
                                   (0665) ;  RETURNS:
                                   (0666) ;     none
                                   (0667) ;
                                   (0668) ;  SIDE EFFECTS:
                                   (0669) ;    The A and X registers may be modified by this or future implementations
                                   (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0673) ;    functions.
                                   (0674) ;
                                   (0675) 
                                   (0676)    macro InLinePutChar( Source )
                                   (0677) .BufEmptyWaitLoop:
                                   (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0679)    jz  .BufEmptyWaitLoop
                                   (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                   (0681)    endm
                                   (0682) 
                                   (0683)  UART_PutChar:
                                   (0684) _UART_PutChar:
                                   (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
0374: AF FC    JZ    0x0371        (0686)    InLinePutChar A
0376: 60 29    MOV   REG[41],A
                                   (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0378: 7F       RET                 (0688)    ret
                                   (0689) .ENDSECTION
                                   (0690) 
                                   (0691) 
                                   (0692) .SECTION
                                   (0693) ;-----------------------------------------------------------------------------
                                   (0694) ;  FUNCTION NAME: UART_cGetChar
                                   (0695) ;
                                   (0696) ;  DESCRIPTION:
                                   (0697) ;     Read character from UART RX port.
                                   (0698) ;-----------------------------------------------------------------------------
                                   (0699) ;
                                   (0700) ;  ARGUMENTS:
                                   (0701) ;      none
                                   (0702) ;
                                   (0703) ;  RETURNS:
                                   (0704) ;     char that is returned from UART
                                   (0705) ;
                                   (0706) ;  SIDE EFFECTS:
                                   (0707) ;    The A and X registers may be modified by this or future implementations
                                   (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0711) ;    functions.
                                   (0712) ;
                                   (0713) ;    Program flow will stay in this function until a character is received.
                                   (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0715) ;    the delay between characters is less than the watchdog timeout.
                                   (0716) ;
                                   (0717)  UART_cGetChar:
                                   (0718) _UART_cGetChar:
                                   (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0379: 49 2F 08 TST   REG[47],8     (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
037C: AF FC    JZ    0x0379        (0721)    jz  UART_cGetChar                             ; If not loop
037E: 5D 2E    MOV   A,REG[46]     (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                   (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0380: 7F       RET                 (0724)    ret
                                   (0725) .ENDSECTION
                                   (0726) 
                                   (0727) 
                                   (0728) .SECTION
                                   (0729) ;-----------------------------------------------------------------------------
                                   (0730) ;  FUNCTION NAME: UART_cReadChar
                                   (0731) ;
                                   (0732) ;  DESCRIPTION:
                                   (0733) ;     Read character from UART RX port.
                                   (0734) ;-----------------------------------------------------------------------------
                                   (0735) ;
                                   (0736) ;  ARGUMENTS:
                                   (0737) ;      none
                                   (0738) ;
                                   (0739) ;  RETURNS:
                                   (0740) ;     char that is returned from UART
                                   (0741) ;
                                   (0742) ;  SIDE EFFECTS:
                                   (0743) ;    The A and X registers may be modified by this or future implementations
                                   (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0747) ;    functions.
                                   (0748) ;
                                   (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0750) ;    implies a valid character or an error condition occured.
                                   (0751) ;
                                   (0752)  UART_cReadChar:
                                   (0753) _UART_cReadChar:
                                   (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0381: 5D 2F    MOV   A,REG[47]     (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0383: 08       PUSH  A             (0756)    push A
0384: 21 08    AND   A,8           (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0386: B0 04    JNZ   0x038B        (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0388: 18       POP   A             (0759)    pop  A
0389: 80 0B    JMP   0x0395        (0760)    jmp  .RX_NO_VALID_CHAR
                                   (0761) 
                                   (0762) .RX_DATA_RDY:
038B: 5D 2E    MOV   A,REG[46]     (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
038D: 4B       SWAP  A,X           (0764)    swap A,X                                                ; determine if data is valid
                                   (0765) 
038E: 18       POP   A             (0766)    pop  A                                                  ; Check for errors
038F: 21 A0    AND   A,160         (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0391: B0 03    JNZ   0x0395        (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0393: 4B       SWAP  A,X           (0769)    swap A,X                                                ; Put data in A and exit
                                   (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0394: 7F       RET                 (0771)    ret
                                   (0772) 
                                   (0773) .RX_NO_VALID_CHAR:
0395: 50 00    MOV   A,0           (0774)    mov A,0x00                                              ; Zero out character
                                   (0775) 
                                   (0776)  End_UART_cReadChar:
                                   (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0397: 7F       RET                 (0778)    ret
                                   (0779) .ENDSECTION
                                   (0780) 
                                   (0781) 
                                   (0782) .SECTION
                                   (0783) ;-----------------------------------------------------------------------------
                                   (0784) ;  FUNCTION NAME: UART_iReadChar
                                   (0785) ;
                                   (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0787) ;  to just set a value in the upper byte if error conditions exists.
                                   (0788) ;
                                   (0789) ;  DESCRIPTION:
                                   (0790) ;     Read character from UART RX port.
                                   (0791) ;-----------------------------------------------------------------------------
                                   (0792) ;
                                   (0793) ;  ARGUMENTS:
                                   (0794) ;      none
                                   (0795) ;
                                   (0796) ;  RETURNS:
                                   (0797) ;     An integer value is returned.  A negative value inplies and error
                                   (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0799) ;
                                   (0800) ;     Error Codes:
                                   (0801) ;        0x80CC    Parity Error
                                   (0802) ;        0x40CC    Overrun Error
                                   (0803) ;        0x20CC    Framing Error
                                   (0804) ;        0x01CC    No Data available
                                   (0805) ;
                                   (0806) ;  SIDE EFFECTS:
                                   (0807) ;    The A and X registers may be modified by this or future implementations
                                   (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0811) ;    functions.
                                   (0812) ;
                                   (0813)  UART_iReadChar:
                                   (0814) _UART_iReadChar:
                                   (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0398: 5D 2F    MOV   A,REG[47]     (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                   (0817)                                                            ; Mask only errors and data ready
039A: 21 E8    AND   A,232         (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
039C: 08       PUSH  A             (0819)    push A
039D: 21 08    AND   A,8           (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
039F: B0 07    JNZ   0x03A7        (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
03A1: 18       POP   A             (0822)    pop  A
03A2: 29 01    OR    A,1           (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
03A4: 4B       SWAP  A,X           (0824)    swap A,X
03A5: 80 07    JMP   0x03AD        (0825)    jmp  End_UART_iReadChar
                                   (0826) 
                                   (0827) .RX_GET_DATA:
03A7: 18       POP   A             (0828)    pop  A
03A8: 21 E0    AND   A,224         (0829)    and  A,UART_RX_ERROR
03AA: 4B       SWAP  A,X           (0830)    swap A,X
03AB: 5D 2E    MOV   A,REG[46]     (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                   (0832)                                                            ; determine if data is valid
                                   (0833) 
                                   (0834)  End_UART_iReadChar:
                                   (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
03AD: 7F       RET                 (0836)    ret
                                   (0837) .ENDSECTION
                                   (0838) 
                                   (0839) 
                                   (0840) .SECTION
                                   (0841) ;-----------------------------------------------------------------------------
                                   (0842) ;  FUNCTION NAME: UART_PutString
                                   (0843) ;
                                   (0844) ;  DESCRIPTION:
                                   (0845) ;     Send String out through UART TX port.
                                   (0846) ;-----------------------------------------------------------------------------
                                   (0847) ;
                                   (0848) ;  ARGUMENTS:
                                   (0849) ;     Pointer to String
                                   (0850) ;     A has MSB of string address
                                   (0851) ;     X has LSB of string address
                                   (0852) ;
                                   (0853) ;  RETURNS:
                                   (0854) ;     none
                                   (0855) ;
                                   (0856) ;  SIDE EFFECTS:
                                   (0857) ;    The A and X registers may be modified by this or future implementations
                                   (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0861) ;    functions.
                                   (0862) ;          
                                   (0863) ;    Currently only the page pointer registers listed below are modified: 
                                   (0864) ;          IDX_PP
                                   (0865) ;
                                   (0866)  UART_PutString:
                                   (0867) _UART_PutString:
03AE: 70 BF    AND   F,191         (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
03B0: 60 D3    MOV   REG[211],A    (0869)    RAM_SETPAGE_IDX A
                                   (0870) .PutStringLoop:
03B2: 52 00    MOV   A,[X+0]       (0871)    mov   A,[X]                                   ; Get value pointed to by X
03B4: A0 06    JZ    0x03BB        (0872)    jz    End_PutString                           ; Check for end of string
03B6: 9F B9    CALL  0x0371        (0873)    call  UART_PutChar                            ; Send character to Tx port
03B8: 75       INC   X             (0874)    inc   X                                       ; Advance pointer to next character
03B9: 8F F8    JMP   0x03B2        (0875)    jmp   .PutStringLoop                          ; Get next character
03BB: 70 3F    AND   F,63
                                   (0876) 
                                   (0877) End_PutString:
03BD: 71 C0    OR    F,192         (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
03BF: 7F       RET                 (0879)    ret
                                   (0880) .ENDSECTION
                                   (0881)     
                                   (0882) .SECTION
                                   (0883) ;-----------------------------------------------------------------------------
                                   (0884) ;  FUNCTION NAME: UART_Write
                                   (0885) ;
                                   (0886) ;  DESCRIPTION:
                                   (0887) ;     Send String of length X to serial port
                                   (0888) ;-----------------------------------------------------------------------------
                                   (0889) ;
                                   (0890) ;  ARGUMENTS:
                                   (0891) ;     Pointer to String
                                   (0892) ;     [SP-5] Count of characters to send
                                   (0893) ;     [SP-4] has MSB of string address
                                   (0894) ;     [SP-3] has LSB of string address
                                   (0895) ;
                                   (0896) ;  RETURNS:
                                   (0897) ;     none
                                   (0898) ;
                                   (0899) ;  SIDE EFFECTS:
                                   (0900) ;    The A and X registers may be modified by this or future implementations
                                   (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0904) ;    functions.
                                   (0905) ;          
                                   (0906) ;    Currently only the page pointer registers listed below are modified: 
                                   (0907) ;          IDX_PP
                                   (0908) ;
                                   (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                   (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (0912) 
                                   (0913)  UART_Write:
                                   (0914) _UART_Write:
03C0: 70 BF    AND   F,191         (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
03C2: 62 D3 01 MOV   REG[211],1    (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
03C5: 4F       MOV   X,SP          (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                   (0918) 
                                   (0919) .NextByteLoop:
03C6: 52 FB    MOV   A,[X-5]       (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
03C8: A0 1A    JZ    0x03E3        (0921)    jz    .End_Write                              ;   Yes, prepare to exit
03CA: 7B FB    DEC   [X-5]         (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (0923) 
                                   (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
03CC: 52 FC    MOV   A,[X-4]       (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (0926)    ENDIF
                                   (0927) 
03CE: 59 FD    MOV   X,[X-3]       (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
03D0: 60 D3    MOV   REG[211],A    (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
03D2: 52 00    MOV   A,[X+0]       (0930)    mov   A, [X]                                  ; Grab the data
03D4: 49 2B 10 TST   REG[43],16
03D7: AF FC    JZ    0x03D4        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
03D9: 60 29    MOV   REG[41],A
03DB: 4F       MOV   X,SP          (0932)    mov   X, SP                                   ; Recover frame pointer
03DC: 62 D3 01 MOV   REG[211],1    (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
03DF: 77 FD    INC   [X-3]         (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
03E1: 8F E4    JMP   0x03C6        (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
03E3: 70 3F    AND   F,63
                                   (0936) 
                                   (0937) .End_Write:
03E5: 71 C0    OR    F,192         (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
03E7: 7F       RET                 (0939)    ret
                                   (0940) .ENDSECTION
                                   (0941)     
                                   (0942) 
                                   (0943) .SECTION
                                   (0944) ;-----------------------------------------------------------------------------
                                   (0945) ;  FUNCTION NAME: UART_CWrite
                                   (0946) ;
                                   (0947) ;             WARNING WARNING NOT COMPLETE
                                   (0948) ;
                                   (0949) ;  DESCRIPTION:
                                   (0950) ;     Send String of length X to serial port
                                   (0951) ;-----------------------------------------------------------------------------
                                   (0952) ;
                                   (0953) ;  ARGUMENTS:
                                   (0954) ;     [SP-4] MSB of Count of character to send
                                   (0955) ;     [SP-3] LSB of Count of character to send
                                   (0956) ;     [SP-2] has MSB of string address
                                   (0957) ;     [SP-1] has LSB of string address
                                   (0958) ;
                                   (0959) ;  RETURNS:
                                   (0960) ;     none
                                   (0961) ;
                                   (0962) ;  SIDE EFFECTS:
                                   (0963) ;    The A and X registers may be modified by this or future implementations
                                   (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0967) ;    functions.
                                   (0968) ;
                                   (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (0973) 
                                   (0974)  UART_CWrite:
                                   (0975) _UART_CWrite:
                                   (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
03E8: 4F       MOV   X,SP          (0977)    mov   X,SP
                                   (0978) .CW_Loop:
03E9: 3D FA 00 CMP   [X-6],0       (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
03EC: B0 06    JNZ   0x03F3        (0980)    jnz   .CW_WRITEIT
03EE: 3D FB 00 CMP   [X-5],0       (0981)    cmp   [X+CLEN_LSB],0x00
03F1: A0 1D    JZ    0x040F        (0982)    jz    .End_CWrite                        ; Leave if done
                                   (0983) 
                                   (0984) .CW_WRITEIT:                                
03F3: 10       PUSH  X             (0985)    push  X                                  ; Save frame pointer
03F4: 52 FC    MOV   A,[X-4]       (0986)    mov   A,[X+CSTR_MSB]
03F6: 59 FD    MOV   X,[X-3]       (0987)    mov   X,[X+CSTR_LSB]
03F8: 28       ROMX                (0988)    romx                                     ; Get character from ROM
03F9: 49 2B 10 TST   REG[43],16
03FC: AF FC    JZ    0x03F9        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
03FE: 60 29    MOV   REG[41],A
0400: 20       POP   X             (0990)    pop   X                                  ; Restore frame pointer
0401: 07 FD 01 ADD   [X-3],1       (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0404: 0F FC 00 ADC   [X-4],0       (0992)    adc   [X+CSTR_MSB],0
0407: 17 FB 01 SUB   [X-5],1       (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
040A: 1F FA 00 SBB   [X-6],0       (0994)    sbb   [X+CLEN_MSB],0x00
040D: 8F DB    JMP   0x03E9        (0995)    jmp   .CW_Loop
040F: 70 3F    AND   F,63
                                   (0996) 
                                   (0997) .End_CWrite:
0411: 71 C0    OR    F,192         (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0413: 7F       RET                 (0999)    ret
                                   (1000) .ENDSECTION
                                   (1001) 
                                   (1002) 
                                   (1003) .SECTION
                                   (1004) ;-----------------------------------------------------------------------------
                                   (1005) ;  FUNCTION NAME: UART_CPutString
                                   (1006) ;
                                   (1007) ;  DESCRIPTION:
                                   (1008) ;     Send String out through UART TX port.
                                   (1009) ;-----------------------------------------------------------------------------
                                   (1010) ;
                                   (1011) ;  ARGUMENTS:
                                   (1012) ;     Pointer to String
                                   (1013) ;     A has MSB of string address
                                   (1014) ;     X has LSB of string address
                                   (1015) ;
                                   (1016) ;  RETURNS:
                                   (1017) ;     none
                                   (1018) ;
                                   (1019) ;  SIDE EFFECTS:
                                   (1020) ;    The A and X registers may be modified by this or future implementations
                                   (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1024) ;    functions.
                                   (1025) ;
                                   (1026)  UART_CPutString:
                                   (1027) _UART_CPutString:
                                   (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0414: 08       PUSH  A             (1029)    push  A                                       ; Store ROM pointer
0415: 10       PUSH  X             (1030)    push  X
0416: 28       ROMX                (1031)    romx                                          ; Get character from ROM
0417: A0 0B    JZ    0x0423        (1032)    jz    .End_CPutString
0419: 9F 56    CALL  0x0371        (1033)    call  UART_PutChar                            ; Print character
041B: 20       POP   X             (1034)    pop   X
041C: 18       POP   A             (1035)    pop   A
041D: 75       INC   X             (1036)    inc   X                                       ; Inc LSB of pointer
041E: DF F5    JNC   0x0414        (1037)    jnc   UART_CPutString                         ; Check for carry
0420: 74       INC   A             (1038)    inc   A                                       ; Inc MSB of pointer
0421: 8F F2    JMP   0x0414        (1039)    jmp   UART_CPutString
                                   (1040) 
                                   (1041) 
                                   (1042) .End_CPutString:
0423: 38 FE    ADD   SP,254        (1043)    add   SP, -2
                                   (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0425: 7F       RET                 (1045)    ret
                                   (1046) .ENDSECTION
                                   (1047) 
                                   (1048) 
                                   (1049) .SECTION
                                   (1050) ;-----------------------------------------------------------------------------
                                   (1051) ;  FUNCTION NAME: UART_PutCRLF
                                   (1052) ;
                                   (1053) ;  DESCRIPTION:
                                   (1054) ;     Send a CR and LF
                                   (1055) ;-----------------------------------------------------------------------------
                                   (1056) ;
                                   (1057) ;  ARGUMENTS:
                                   (1058) ;     none.
                                   (1059) ;
                                   (1060) ;  RETURNS:
                                   (1061) ;     none.
                                   (1062) ;
                                   (1063) ;  SIDE EFFECTS:
                                   (1064) ;    The A and X registers may be modified by this or future implementations
                                   (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1068) ;    functions.
                                   (1069) ;
                                   (1070)  UART_PutCRLF:
                                   (1071) _UART_PutCRLF:
                                   (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0426: 50 0D    MOV   A,13          (1073)    mov  A,0x0D                        ; Send CR
0428: 9F 47    CALL  0x0371        (1074)    call UART_PutChar
042A: 50 0A    MOV   A,10          (1075)    mov  A,0x0A                        ; Send LF
042C: 9F 43    CALL  0x0371        (1076)    call UART_PutChar
                                   (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
042E: 7F       RET                 (1078)    ret
                                   (1079) .ENDSECTION
                                   (1080) 
                                   (1081) 
                                   (1082) IF (UART_RXBUF_ENABLE)
                                   (1083) ;=============================================================================
                                   (1084) ;=============================================================================
                                   (1085) ;
                                   (1086) ;     Command Buffer commands
                                   (1087) ;
                                   (1088) ;=============================================================================
                                   (1089) ;=============================================================================
                                   (1090) 
                                   (1091) .SECTION
                                   (1092) ;-----------------------------------------------------------------------------
                                   (1093) ;  FUNCTION NAME: UART_CmdReset
                                   (1094) ;
                                   (1095) ;  DESCRIPTION:
                                   (1096) ;     Reset command string and status flags
                                   (1097) ;-----------------------------------------------------------------------------
                                   (1098) ;
                                   (1099) ;  ARGUMENTS:
                                   (1100) ;     none.
                                   (1101) ;
                                   (1102) ;  RETURNS:
                                   (1103) ;     none.
                                   (1104) ;
                                   (1105) ;  SIDE EFFECTS:
                                   (1106) ;    The A and X registers may be modified by this or future implementations
                                   (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1110) ;    functions.
                                   (1111) ;          
                                   (1112) ;    Currently only the page pointer registers listed below are modified: 
                                   (1113) ;          CUR_PP
                                   (1114) ;
                                   (1115) ;  THEORY of OPERATION or PROCEDURE:
                                   (1116) ;     Clear the command buffer, command counter, and flag.
                                   (1117) ;
                                   (1118)  UART_CmdReset:
                                   (1119) _UART_CmdReset:
                                   (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
042F: 62 D0 00 MOV   REG[208],0    (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0432: 55 03 00 MOV   [3],0         (1122)    mov [UART_aRxBuffer], 0x00
0435: 62 D0 00 MOV   REG[208],0    (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
0438: 55 01 00 MOV   [1],0         (1124)    mov [UART_bRxCnt], 0x00
043B: 26 00 00 AND   [0],0         (1125)    and [UART_fStatus], 0x00
043E: 62 D0 00 MOV   REG[208],0    (1126)    RAM_SETPAGE_CUR >ptrParam
0441: 55 18 00 MOV   [24],0        (1127)    mov [ptrParam],0x00
                                   (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0444: 7F       RET                 (1129)    ret
                                   (1130) .ENDSECTION
                                   (1131) 
                                   (1132) 
                                   (1133) .SECTION
                                   (1134) ;-----------------------------------------------------------------------------
                                   (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                   (1136) ;
                                   (1137) ;  DESCRIPTION:
                                   (1138) ;     Check to see if valid command in buffer.
                                   (1139) ;-----------------------------------------------------------------------------
                                   (1140) ;
                                   (1141) ;  ARGUMENTS:
                                   (1142) ;     none.
                                   (1143) ;
                                   (1144) ;  RETURNS:
                                   (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1146) ;                     Returns non-zero value in A if command is valid.
                                   (1147) ;
                                   (1148) ;  SIDE EFFECTS:
                                   (1149) ;    The A and X registers may be modified by this or future implementations
                                   (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1153) ;    functions.
                                   (1154) ;          
                                   (1155) ;    Currently only the page pointer registers listed below are modified: 
                                   (1156) ;          CUR_PP
                                   (1157) ;
                                   (1158) ;  THEORY of OPERATION or PROCEDURE:
                                   (1159) ;     Read the status and control register.
                                   (1160) ;
                                   (1161)  UART_bCmdCheck:
                                   (1162) _UART_bCmdCheck:
                                   (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
0445: 62 D0 00 MOV   REG[208],0    (1164)    RAM_SETPAGE_CUR >UART_fStatus
0448: 51 00    MOV   A,[0]         (1165)    mov A,  [UART_fStatus]
044A: 21 01    AND   A,1           (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                   (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
044C: 7F       RET                 (1168)    ret
                                   (1169) .ENDSECTION
                                   (1170)     
                                   (1171) 
                                   (1172) .SECTION
                                   (1173) ;-----------------------------------------------------------------------------
                                   (1174) ;  FUNCTION NAME: UART_bErrCheck
                                   (1175) ;
                                   (1176) ;  DESCRIPTION:
                                   (1177) ;     Check to see if an error has occured since last CmdReset
                                   (1178) ;-----------------------------------------------------------------------------
                                   (1179) ;
                                   (1180) ;  ARGUMENTS:
                                   (1181) ;     none.
                                   (1182) ;
                                   (1183) ;  RETURNS:
                                   (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1185) ;                     Returns non-zero value in A if command is valid.
                                   (1186) ;           0x80 => Parity Error
                                   (1187) ;           0x40 => OverRun Error
                                   (1188) ;           0x20 => Framing Error
                                   (1189) ;           0x10 => Software Buffer OverRun
                                   (1190) ;
                                   (1191) ;  SIDE EFFECTS:
                                   (1192) ;    The A and X registers may be modified by this or future implementations
                                   (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1196) ;    functions.
                                   (1197) ;          
                                   (1198) ;    Currently only the page pointer registers listed below are modified: 
                                   (1199) ;          CUR_PP
                                   (1200) ;     Error Status is clear when read.
                                   (1201) ;
                                   (1202) ;  THEORY of OPERATION or PROCEDURE:
                                   (1203) ;     Read RX buffer error status and clear status
                                   (1204) ;
                                   (1205)  UART_bErrCheck:
                                   (1206) _UART_bErrCheck:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
044D: 62 D0 00 MOV   REG[208],0    (1208)    RAM_SETPAGE_CUR >UART_fStatus
0450: 51 00    MOV   A,[0]         (1209)    mov A,  [UART_fStatus]
0452: 21 F0    AND   A,240         (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0454: 26 00 0F AND   [0],15        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                   (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0457: 7F       RET                 (1213)    ret
                                   (1214) .ENDSECTION
                                   (1215) 
                                   (1216) .SECTION
                                   (1217) ;-----------------------------------------------------------------------------
                                   (1218) ;  FUNCTION NAME: UART_bCmdLength
                                   (1219) ;
                                   (1220) ;  DESCRIPTION:
                                   (1221) ;     Get length of command string
                                   (1222) ;-----------------------------------------------------------------------------
                                   (1223) ;
                                   (1224) ;  ARGUMENTS:
                                   (1225) ;     none.
                                   (1226) ;
                                   (1227) ;  RETURNS:
                                   (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (1229) ;
                                   (1230) ;  SIDE EFFECTS:
                                   (1231) ;    The A and X registers may be modified by this or future implementations
                                   (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1235) ;    functions.
                                   (1236) ;          
                                   (1237) ;    Currently only the page pointer registers listed below are modified: 
                                   (1238) ;          CUR_PP
                                   (1239) ;
                                   (1240)  UART_bCmdLength:
                                   (1241) _UART_bCmdLength:
                                   (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
0458: 62 D0 00 MOV   REG[208],0    (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
045B: 51 01    MOV   A,[1]         (1244)    mov A,  [UART_bRxCnt]
                                   (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
045D: 7F       RET                 (1246)    ret
                                   (1247) .ENDSECTION
                                   (1248) 
                                   (1249) 
                                   (1250) .SECTION
                                   (1251) ;-----------------------------------------------------------------------------
                                   (1252) ;  FUNCTION NAME: UART_szGetParam
                                   (1253) ;
                                   (1254) ;  DESCRIPTION:
                                   (1255) ;      Return next parameter from UART Rx buffer
                                   (1256) ;-----------------------------------------------------------------------------
                                   (1257) ;
                                   (1258) ;  ARGUMENTS:  none
                                   (1259) ;
                                   (1260) ;  RETURNS:
                                   (1261) ;     A => MSB of parameter address
                                   (1262) ;     X => LSB of parameter address
                                   (1263) ;
                                   (1264) ;  SIDE EFFECTS:
                                   (1265) ;    The A and X registers may be modified by this or future implementations
                                   (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1269) ;    functions.
                                   (1270) ;          
                                   (1271) ;    Currently only the page pointer registers listed below are modified: 
                                   (1272) ;          CUR_PP
                                   (1273) ;          IDX_PP
                                   (1274) ;
                                   (1275) ;     The receive string is modified by placing Null characters at the end
                                   (1276) ;     of each parameter as they are recovered.
                                   (1277) ;
                                   (1278) ;  THEORY OF OPERATION:
                                   (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                   (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                   (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                   (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                   (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                   (1284) ;     offset. The generator is initialized by a call to the function
                                   (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                   (1286) ;     state. Typically this function, UART_szGetParam, is
                                   (1287) ;     not called until the buffer has been loaded with an entire command
                                   (1288) ;     (See UART_bCmdCheck).
                                   (1289) ;
                                   (1290) ;     Note, there is no special distinction between the "command" and the 
                                   (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                   (1292) ;     character of the "command"---is also, for the purposes of this function,
                                   (1293) ;     the first "parameter" to which it returns an address.
                                   (1294) ;
                                   (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                   (1296) ;     is determined at configuration time by a user module parameter.
                                   (1297) ;
                                   (1298)  UART_szGetParam:
                                   (1299) _UART_szGetParam:
                                   (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
045E: 70 BF    AND   F,191         (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1302)     
0460: 62 D0 00 MOV   REG[208],0    (1303)    RAM_SETPAGE_CUR >ptrParam
0463: 50 03    MOV   A,3           (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0465: 02 18    ADD   A,[24]        (1305)    add   A, [ptrParam]                      ; Add string offset
0467: 5C       MOV   X,A           (1306)    mov   X, A
0468: 62 D3 00 MOV   REG[211],0    (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
046B: 52 00    MOV   A,[X+0]       (1308)    mov   A, [X]                             ; Get character pointed by X
046D: B0 04    JNZ   0x0472        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
046F: 10       PUSH  X             (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0470: 80 33    JMP   0x04A4        (1311)    jmp   .End_GetNextParam
                                   (1312)                                             ; Check for delimiter and keep looping until
                                   (1313)                                             ; all leading delimiters have been found.
                                   (1314) .SkipOverDelimitersLoop:
0472: 39 20    CMP   A,32          (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0474: B0 11    JNZ   0x0486        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0476: 75       INC   X             (1317)    inc   X                                  ;   Yes, Increment both index and...
0477: 76 18    INC   [24]          (1318)    inc   [ptrParam]                         ;          the stored pointer.
0479: 52 00    MOV   A,[X+0]       (1319)    mov   A, [X]                             ; Get character pointed by X
047B: 3C 18 0F CMP   [24],15       (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
047E: BF F3    JNZ   0x0472        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                   (1322) 
                                   (1323) .EndOfString:                               ;   Yes, end of string found...
0480: 10       PUSH  X             (1324)    push  X                                  ;        Save ptr
                                   (1325) .TerminateString:
0481: 56 00 00 MOV   [X+0],0       (1326)    mov   [X], 0x00                          ; Make sure string is zero
0484: 80 1F    JMP   0x04A4        (1327)    jmp   .End_GetNextParam
                                   (1328) 
                                   (1329) .ParamStartFound:
0486: 10       PUSH  X             (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                   (1331) 
                                   (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0487: 75       INC   X             (1333)    inc   X                                  ; Advance pointers.
0488: 76 18    INC   [24]          (1334)    inc   [ptrParam]
048A: 3C 18 0F CMP   [24],15       (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
048D: AF F3    JZ    0x0481        (1336)    jz    .TerminateString
048F: 52 00    MOV   A,[X+0]       (1337)    mov   A, [X]                             ; Get next character
0491: A0 12    JZ    0x04A4        (1338)    jz    .End_GetNextParam
0493: 39 20    CMP   A,32          (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
0495: BF F1    JNZ   0x0487        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0497: 56 00 00 MOV   [X+0],0       (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
049A: 76 18    INC   [24]          (1342)    inc   [ptrParam]
049C: 3C 18 0F CMP   [24],15       (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
049F: B0 04    JNZ   0x04A4        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
04A1: 55 18 0F MOV   [24],15       (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                   (1346) 
                                   (1347) .End_GetNextParam:
04A4: 20       POP   X             (1348)    pop   X
04A5: 10       PUSH  X             (1349)    push  X
04A6: 3D 00 00 CMP   [X+0],0       (1350)    cmp   [X], 0x00
04A9: B0 0B    JNZ   0x04B5        (1351)    jnz   .NotNullString
04AB: 20       POP   X             (1352)    pop   X
04AC: 57 00    MOV   X,0           (1353)    mov   X, 0x00
04AE: 50 00    MOV   A,0           (1354)    mov   A, >UART_aRxBuffer
04B0: 70 3F    AND   F,63
04B2: 71 C0    OR    F,192         (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
04B4: 7F       RET                 (1357)    ret
                                   (1358) 
                                   (1359) .NotNullString:
04B5: 20       POP   X             (1360)    pop  X
04B6: 50 00    MOV   A,0           (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
04B8: 70 3F    AND   F,63
04BA: 71 C0    OR    F,192         (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
04BC: 7F       RET                 (1364)    ret
                                   (1365) .ENDSECTION
                                   (1366) 
                                   (1367) 
                                   (1368) .SECTION
                                   (1369) ;-----------------------------------------------------------------------------
                                   (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                   (1371) ;
                                   (1372) ;  DESCRIPTION:
                                   (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                   (1374) ;-----------------------------------------------------------------------------
                                   (1375) ;
                                   (1376) ;  ARGUMENTS:  none
                                   (1377) ;
                                   (1378) ;  RETURNS:
                                   (1379) ;     A => MSB of parameter
                                   (1380) ;     X => LSB of parameter
                                   (1381) ;
                                   (1382) ;  SIDE EFFECTS:
                                   (1383) ;    The A and X registers may be modified by this or future implementations
                                   (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1387) ;    functions.
                                   (1388) ;          
                                   (1389) ;    Currently only the page pointer registers listed below are modified: 
                                   (1390) ;          CUR_PP
                                   (1391) ;
                                   (1392)  UART_szGetRestOfParams:
                                   (1393) _UART_szGetRestOfParams:
                                   (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
04BD: 62 D0 00 MOV   REG[208],0    (1395)    RAM_SETPAGE_CUR >ptrParam
04C0: 50 03    MOV   A,3           (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
04C2: 02 18    ADD   A,[24]        (1397)    add  A, [ptrParam]                       ; Add string offset
04C4: 5C       MOV   X,A           (1398)    mov  X,A
04C5: 50 00    MOV   A,0           (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                   (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
04C7: 7F       RET                 (1401)    ret

FILE: lib\led_1.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   LED_1.asm
                                   (0004) ;;  Version: 1.2, Updated on 2008/6/23 at 12:24:56
                                   (0005) ;;  Generated by PSoC Designer ???
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: LED user module for 22/24/27/29xxx PSoC family of devices.
                                   (0008) ;;
                                   (0009) ;;
                                   (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0012) ;;        This means it is the caller's responsibility to preserve any values
                                   (0013) ;;        in the X and A registers that are still needed after the API functions
                                   (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0018) ;;-----------------------------------------------------------------------------
                                   (0019) ;;  Copyright (c) Cypress MicroSystems 2005. All Rights Reserved.
                                   (0020) ;;*****************************************************************************
                                   (0021) ;;*****************************************************************************
                                   (0022) 
                                   (0023) include "LED_1.inc"
                                   (0024) include "memory.inc"
                                   (0025) 
                                   (0026) export _LED_1_Start
                                   (0027) export  LED_1_Start
                                   (0028) 
                                   (0029) export _LED_1_Stop
                                   (0030) export  LED_1_Stop
                                   (0031) 
                                   (0032) export _LED_1_On
                                   (0033) export  LED_1_On
                                   (0034) 
                                   (0035) export _LED_1_Off
                                   (0036) export  LED_1_Off
                                   (0037) 
                                   (0038) export _LED_1_Switch
                                   (0039) export  LED_1_Switch
                                   (0040) 
                                   (0041) export _LED_1_Invert
                                   (0042) export  LED_1_Invert
                                   (0043) 
                                   (0044) export _LED_1_GetState
                                   (0045) export  LED_1_GetState
                                   (0046) 
                                   (0047) 
                                   (0048) AREA UserModules (ROM, REL)
                                   (0049) 
                                   (0050) 
                                   (0051) .SECTION
                                   (0052) ;-----------------------------------------------------------------------------
                                   (0053) ;  FUNCTION NAME: LED_1_Start(void)
                                   (0054) ;  FUNCTION NAME: LED_1_Stop(void)
                                   (0055) ;
                                   (0056) ;  FUNCTION NAME: LED_1_Switch(void)
                                   (0057) ;
                                   (0058) ;  DESCRIPTION: ( Switch )
                                   (0059) ;     Turn LED on or off     
                                   (0060) ;
                                   (0061) ;  DESCRIPTION: ( Start, Stop )
                                   (0062) ;     Turn LED off                       
                                   (0063) ;
                                   (0064) ;-----------------------------------------------------------------------------
                                   (0065) ;
                                   (0066) ;  ARGUMENTS:  ( Switch )
                                   (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                   (0068) ;
                                   (0069) ;  ARGUMENTS:  ( Start, Stop )
                                   (0070) ;      None
                                   (0071) ;
                                   (0072) ;  RETURNS:  none
                                   (0073) ;
                                   (0074) ;  SIDE EFFECTS:
                                   (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (0076) ;
                                   (0077) ;-----------------------------------------------------------------------------
                                   (0078) _LED_1_On:
                                   (0079)  LED_1_On:
04C8: 50 01    MOV   A,1           (0080)    mov  A,0x01
04CA: 80 03    JMP   0x04CE        (0081)    jmp  LED_1_Switch 
                                   (0082) 
                                   (0083) _LED_1_Start:
                                   (0084)  LED_1_Start:
                                   (0085) _LED_1_Stop:
                                   (0086)  LED_1_Stop:
                                   (0087) _LED_1_Off:
                                   (0088)  LED_1_Off:
04CC: 50 00    MOV   A,0           (0089)    mov  A,0x00
                                   (0090) 
                                   (0091) _LED_1_Switch:
                                   (0092)  LED_1_Switch:
                                   (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
04CE: 62 D0 00 MOV   REG[208],0    (0095)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                   (0096) 
04D1: 29 00    OR    A,0           (0097)    or   A,0x00                                   ; Check mode
04D3: A0 06    JZ    0x04DA        (0098)    jz   .Turn_Off_LED
                                   (0099) 
                                   (0100) .Turn_On_LED:
                                   (0101) IF(0)                                            ; Active High Digit Drive
                                   (0102)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                   (0103) ELSE                                             ; Active Low Digit Drive
04D5: 26 02 7F AND   [2],127       (0104)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                   (0105) ENDIF
04D8: 80 04    JMP   0x04DD        (0106)    jmp  .Switch_LED
                                   (0107) 
                                   (0108) .Turn_Off_LED:
                                   (0109) IF(0)                      ; Active High Digit Drive
                                   (0110)    and  [Port_0_Data_SHADE],~LED_1_PinMask
                                   (0111) ELSE                              ; Active Low Digit Drive
04DA: 2E 02 80 OR    [2],128       (0112)    or   [Port_0_Data_SHADE],LED_1_PinMask
                                   (0113) ENDIF
                                   (0114) 
                                   (0115) .Switch_LED:
04DD: 51 02    MOV   A,[2]         (0116)    mov  A,[Port_0_Data_SHADE]
04DF: 60 00    MOV   REG[0],A      (0117)    mov  reg[LED_1_PortDR],A
04E1: 70 3F    AND   F,63
                                   (0118) 
04E3: 71 C0    OR    F,192         (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
04E5: 7F       RET                 (0121)    ret
                                   (0122) .ENDSECTION
                                   (0123) 
                                   (0124) 
                                   (0125) 
                                   (0126) .SECTION
                                   (0127) ;-----------------------------------------------------------------------------
                                   (0128) ;  FUNCTION NAME: LED_1_Invert(void)
                                   (0129) ;
                                   (0130) ;  DESCRIPTION:
                                   (0131) ;     Invert state of LED                               
                                   (0132) ;
                                   (0133) ;-----------------------------------------------------------------------------
                                   (0134) ;
                                   (0135) ;  ARGUMENTS: none
                                   (0136) ;
                                   (0137) ;  RETURNS:  none
                                   (0138) ;
                                   (0139) ;  SIDE EFFECTS:
                                   (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (0141) ;
                                   (0142) ;-----------------------------------------------------------------------------
                                   (0143) _LED_1_Invert:
                                   (0144)  LED_1_Invert:
                                   (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
04E6: 62 D0 00 MOV   REG[208],0    (0147)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                   (0148) 
04E9: 36 02 80 XOR   [2],128       (0149)    xor  [Port_0_Data_SHADE],LED_1_PinMask
04EC: 51 02    MOV   A,[2]         (0150)    mov  A,[Port_0_Data_SHADE]
04EE: 60 00    MOV   REG[0],A      (0151)    mov  reg[LED_1_PortDR],A
04F0: 70 3F    AND   F,63
                                   (0152) 
04F2: 71 C0    OR    F,192         (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
04F4: 7F       RET                 (0155)    ret
                                   (0156) .ENDSECTION
                                   (0157) 
                                   (0158) .SECTION
                                   (0159) ;-----------------------------------------------------------------------------
                                   (0160) ;  FUNCTION NAME: LED_1_GetState(void)
                                   (0161) ;
                                   (0162) ;  DESCRIPTION:
                                   (0163) ;     Get state of LED
                                   (0164) ;
                                   (0165) ;-----------------------------------------------------------------------------
                                   (0166) ;
                                   (0167) ;  ARGUMENTS: none
                                   (0168) ;
                                   (0169) ;  RETURNS:  
                                   (0170) ;    State of LED   1 = ON,  0 = OFF
                                   (0171) ;
                                   (0172) ;  SIDE EFFECTS:
                                   (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                   (0174) ;
                                   (0175) ;-----------------------------------------------------------------------------
                                   (0176) _LED_1_GetState:
                                   (0177)  LED_1_GetState:
                                   (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
04F5: 62 D0 00 MOV   REG[208],0    (0180)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                   (0181) 
04F8: 51 02    MOV   A,[2]         (0182)    mov   A,[Port_0_Data_SHADE]         ; Get shade value
                                   (0183) IF(0)                                  ; Active High Digit Drive
                                   (0184)    // Nothing for now
                                   (0185) ELSE                                   ; Active Low Digit Drive
04FA: 73       CPL   A             (0186)    cpl   A                             ; Invert bit if Active low
                                   (0187) ENDIF
04FB: 21 80    AND   A,128         (0188)    and   A,LED_1_PinMask               ; Mask off the trash
04FD: A0 03    JZ    0x0501        (0189)    jz    .End_LED_GS                   ; If zero, we're done
04FF: 50 01    MOV   A,1           (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
0501: 70 3F    AND   F,63
                                   (0191) 
                                   (0192) .End_LED_GS:
0503: 71 C0    OR    F,192         (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                   (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0505: 7F       RET                 (0195)    ret

FILE: .\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "apu_psoc.h"
(0008) 
(0009) //#define ADDR_DEBUG
(0010) 
(0011) #define UART_FLUSH()          while (!(UART_bReadTxStatus() & UART_TX_BUFFER_EMPTY)) \
(0012)                               { /* wait for buffer empty */ }                    \
(0013)                               UART_bReadTxStatus(); /* clear TX_COMPLETE */        \
(0014)                               while (!(UART_bReadTxStatus() & UART_TX_COMPLETE))     \
(0015)                               { /* wait for TX_COMPLETE */ }
(0016) 
(0017) 
(0018) 
(0019) void go_data_output(void)
(0020) {
(0021) 	GO_OUTPUT(D0_PORT, D0_PIN);
_go_data_output:
__text_start:
0506: 43 0B 10 OR    REG[11],16
0509: 71 10    OR    F,16
050B: 41 09 EF AND   REG[9],239
050E: 70 EF    AND   F,239
0510: 71 10    OR    F,16
0512: 43 08 10 OR    REG[8],16
0515: 70 EF    AND   F,239
(0022) 	GO_OUTPUT(D1_PORT, D1_PIN);
0517: 43 0B 20 OR    REG[11],32
051A: 71 10    OR    F,16
051C: 41 09 DF AND   REG[9],223
051F: 70 EF    AND   F,239
0521: 71 10    OR    F,16
0523: 43 08 20 OR    REG[8],32
0526: 70 EF    AND   F,239
(0023) 	GO_OUTPUT(D2_PORT, D2_PIN);
0528: 43 0B 40 OR    REG[11],64
052B: 71 10    OR    F,16
052D: 41 09 BF AND   REG[9],191
0530: 70 EF    AND   F,239
0532: 71 10    OR    F,16
0534: 43 08 40 OR    REG[8],64
0537: 70 EF    AND   F,239
(0024) 	GO_OUTPUT(D3_PORT, D3_PIN);
0539: 43 0B 08 OR    REG[11],8
053C: 71 10    OR    F,16
053E: 41 09 F7 AND   REG[9],247
0541: 70 EF    AND   F,239
0543: 71 10    OR    F,16
0545: 43 08 08 OR    REG[8],8
0548: 70 EF    AND   F,239
(0025) 	GO_OUTPUT(D4_PORT, D4_PIN);
054A: 43 03 01 OR    REG[3],1
054D: 71 10    OR    F,16
054F: 41 01 FE AND   REG[1],254
0552: 70 EF    AND   F,239
0554: 71 10    OR    F,16
0556: 43 00 01 OR    REG[0],1
0559: 70 EF    AND   F,239
(0026) 	GO_OUTPUT(D5_PORT, D5_PIN);
055B: 43 0B 02 OR    REG[11],2
055E: 71 10    OR    F,16
0560: 41 09 FD AND   REG[9],253
0563: 70 EF    AND   F,239
0565: 71 10    OR    F,16
0567: 43 08 02 OR    REG[8],2
056A: 70 EF    AND   F,239
(0027) 	GO_OUTPUT(D6_PORT, D6_PIN);
056C: 43 03 04 OR    REG[3],4
056F: 71 10    OR    F,16
0571: 41 01 FB AND   REG[1],251
0574: 70 EF    AND   F,239
0576: 71 10    OR    F,16
0578: 43 00 04 OR    REG[0],4
057B: 70 EF    AND   F,239
(0028) 	GO_OUTPUT(D7_PORT, D7_PIN);
057D: 43 07 40 OR    REG[7],64
0580: 71 10    OR    F,16
0582: 41 05 BF AND   REG[5],191
0585: 70 EF    AND   F,239
0587: 71 10    OR    F,16
0589: 43 04 40 OR    REG[4],64
058C: 70 EF    AND   F,239
(0029) }
058E: 7F       RET   
(0030) 
(0031) void go_data_input(void)
(0032) {
(0033) 	GO_INPUT(D0_PORT, D0_PIN);
_go_data_input:
058F: 41 0B EF AND   REG[11],239
0592: 71 10    OR    F,16
0594: 43 09 10 OR    REG[9],16
0597: 70 EF    AND   F,239
0599: 71 10    OR    F,16
059B: 43 08 10 OR    REG[8],16
059E: 70 EF    AND   F,239
05A0: 43 08 10 OR    REG[8],16
(0034) 	GO_INPUT(D1_PORT, D1_PIN);
05A3: 41 0B DF AND   REG[11],223
05A6: 71 10    OR    F,16
05A8: 43 09 20 OR    REG[9],32
05AB: 70 EF    AND   F,239
05AD: 71 10    OR    F,16
05AF: 43 08 20 OR    REG[8],32
05B2: 70 EF    AND   F,239
05B4: 43 08 20 OR    REG[8],32
(0035) 	GO_INPUT(D2_PORT, D2_PIN);
05B7: 41 0B BF AND   REG[11],191
05BA: 71 10    OR    F,16
05BC: 43 09 40 OR    REG[9],64
05BF: 70 EF    AND   F,239
05C1: 71 10    OR    F,16
05C3: 43 08 40 OR    REG[8],64
05C6: 70 EF    AND   F,239
05C8: 43 08 40 OR    REG[8],64
(0036) 	GO_INPUT(D3_PORT, D3_PIN);
05CB: 41 0B F7 AND   REG[11],247
05CE: 71 10    OR    F,16
05D0: 43 09 08 OR    REG[9],8
05D3: 70 EF    AND   F,239
05D5: 71 10    OR    F,16
05D7: 43 08 08 OR    REG[8],8
05DA: 70 EF    AND   F,239
05DC: 43 08 08 OR    REG[8],8
(0037) 	GO_INPUT(D4_PORT, D4_PIN);
05DF: 41 03 FE AND   REG[3],254
05E2: 71 10    OR    F,16
05E4: 43 01 01 OR    REG[1],1
05E7: 70 EF    AND   F,239
05E9: 71 10    OR    F,16
05EB: 43 00 01 OR    REG[0],1
05EE: 70 EF    AND   F,239
05F0: 43 00 01 OR    REG[0],1
(0038) 	GO_INPUT(D5_PORT, D5_PIN);
05F3: 41 0B FD AND   REG[11],253
05F6: 71 10    OR    F,16
05F8: 43 09 02 OR    REG[9],2
05FB: 70 EF    AND   F,239
05FD: 71 10    OR    F,16
05FF: 43 08 02 OR    REG[8],2
0602: 70 EF    AND   F,239
0604: 43 08 02 OR    REG[8],2
(0039) 	GO_INPUT(D6_PORT, D6_PIN);
0607: 41 03 FB AND   REG[3],251
060A: 71 10    OR    F,16
060C: 43 01 04 OR    REG[1],4
060F: 70 EF    AND   F,239
0611: 71 10    OR    F,16
0613: 43 00 04 OR    REG[0],4
0616: 70 EF    AND   F,239
0618: 43 00 04 OR    REG[0],4
(0040) 	GO_INPUT(D7_PORT, D7_PIN);
061B: 41 07 BF AND   REG[7],191
061E: 71 10    OR    F,16
0620: 43 05 40 OR    REG[5],64
0623: 70 EF    AND   F,239
0625: 71 10    OR    F,16
0627: 43 04 40 OR    REG[4],64
062A: 70 EF    AND   F,239
062C: 43 04 40 OR    REG[4],64
(0041) }
062F: 7F       RET   
(0042) 
(0043) void apu_put_data(unsigned char data)
(0044) {
_apu_put_data:
  data                 --> X-4
0630: 10       PUSH  X
0631: 4F       MOV   X,SP
(0045) 	// this is gross!!!
(0046) 	
(0047) 	if (data & 0x01)
0632: 48 FC 01 TST   [X-4],1
0635: A0 06    JZ    0x063C
(0048) 		SET_DATA(D0_PORT, D0_PIN);
0637: 43 08 10 OR    REG[8],16
063A: 80 04    JMP   0x063F
(0049) 	else
(0050) 		CLR_DATA(D0_PORT, D0_PIN);
063C: 41 08 EF AND   REG[8],239
(0051) 	
(0052) 	if (data & 0x02)
063F: 48 FC 02 TST   [X-4],2
0642: A0 06    JZ    0x0649
(0053) 		SET_DATA(D1_PORT, D1_PIN);
0644: 43 08 20 OR    REG[8],32
0647: 80 04    JMP   0x064C
(0054) 	else
(0055) 		CLR_DATA(D1_PORT, D1_PIN);
0649: 41 08 DF AND   REG[8],223
(0056) 	
(0057) 	if (data & 0x04)
064C: 48 FC 04 TST   [X-4],4
064F: A0 06    JZ    0x0656
(0058) 		SET_DATA(D2_PORT, D2_PIN);
0651: 43 08 40 OR    REG[8],64
0654: 80 04    JMP   0x0659
(0059) 	else
(0060) 		CLR_DATA(D2_PORT, D2_PIN);
0656: 41 08 BF AND   REG[8],191
(0061) 	
(0062) 	if (data & 0x08)
0659: 48 FC 08 TST   [X-4],8
065C: A0 06    JZ    0x0663
(0063) 		SET_DATA(D3_PORT, D3_PIN);
065E: 43 08 08 OR    REG[8],8
0661: 80 04    JMP   0x0666
(0064) 	else
(0065) 		CLR_DATA(D3_PORT, D3_PIN);
0663: 41 08 F7 AND   REG[8],247
(0066) 	
(0067) 	if (data & 0x10)
0666: 48 FC 10 TST   [X-4],16
0669: A0 06    JZ    0x0670
(0068) 		SET_DATA(D4_PORT, D4_PIN);
066B: 43 00 01 OR    REG[0],1
066E: 80 04    JMP   0x0673
(0069) 	else
(0070) 		CLR_DATA(D4_PORT, D4_PIN);
0670: 41 00 FE AND   REG[0],254
(0071) 	
(0072) 	if (data & 0x20)
0673: 48 FC 20 TST   [X-4],32
0676: A0 06    JZ    0x067D
(0073) 		SET_DATA(D5_PORT, D5_PIN);
0678: 43 08 02 OR    REG[8],2
067B: 80 04    JMP   0x0680
(0074) 	else
(0075) 		CLR_DATA(D5_PORT, D5_PIN);
067D: 41 08 FD AND   REG[8],253
(0076) 	
(0077) 	if (data & 0x40)
0680: 48 FC 40 TST   [X-4],64
0683: A0 06    JZ    0x068A
(0078) 		SET_DATA(D6_PORT, D6_PIN);
0685: 43 00 04 OR    REG[0],4
0688: 80 04    JMP   0x068D
(0079) 	else
(0080) 		CLR_DATA(D6_PORT, D6_PIN);
068A: 41 00 FB AND   REG[0],251
(0081) 	
(0082) 	if (data & 0x80)
068D: 48 FC 80 TST   [X-4],128
0690: A0 06    JZ    0x0697
(0083) 		SET_DATA(D7_PORT, D7_PIN);
0692: 43 04 40 OR    REG[4],64
0695: 80 04    JMP   0x069A
(0084) 	else
(0085) 		CLR_DATA(D7_PORT, D7_PIN);
0697: 41 04 BF AND   REG[4],191
(0086) }
069A: 20       POP   X
069B: 7F       RET   
(0087) 
(0088) unsigned char apu_get_data(void)
(0089) {
_apu_get_data:
  indata               --> X+0
069C: 10       PUSH  X
069D: 4F       MOV   X,SP
069E: 38 11    ADD   SP,17
(0090) 	// this is also pretty ugly
(0091) 	unsigned char indata = 0x00;
06A0: 56 00 00 MOV   [X+0],0
(0092) 	
(0093) 	indata |= (GET_DATA(D6_PORT, D6_PIN)) ? 0x40 : 0x00;
06A3: 49 00 04 TST   REG[0],4
06A6: A0 09    JZ    0x06B0
06A8: 56 02 40 MOV   [X+2],64
06AB: 56 01 00 MOV   [X+1],0
06AE: 80 07    JMP   0x06B6
06B0: 56 02 00 MOV   [X+2],0
06B3: 56 01 00 MOV   [X+1],0
06B6: 62 D0 00 MOV   REG[208],0
06B9: 52 00    MOV   A,[X+0]
06BB: 53 16    MOV   [__r1],A
06BD: 55 17 00 MOV   [__r0],0
06C0: 52 02    MOV   A,[X+2]
06C2: 2C 16    OR    [__r1],A
06C4: 52 01    MOV   A,[X+1]
06C6: 2C 17    OR    [__r0],A
06C8: 51 16    MOV   A,[__r1]
06CA: 54 00    MOV   [X+0],A
(0094) 	indata |= (GET_DATA(D0_PORT, D0_PIN)) ? 0x01 : 0x00;
06CC: 49 08 10 TST   REG[8],16
06CF: A0 09    JZ    0x06D9
06D1: 56 04 01 MOV   [X+4],1
06D4: 56 03 00 MOV   [X+3],0
06D7: 80 07    JMP   0x06DF
06D9: 56 04 00 MOV   [X+4],0
06DC: 56 03 00 MOV   [X+3],0
06DF: 62 D0 00 MOV   REG[208],0
06E2: 52 00    MOV   A,[X+0]
06E4: 53 16    MOV   [__r1],A
06E6: 55 17 00 MOV   [__r0],0
06E9: 52 04    MOV   A,[X+4]
06EB: 2C 16    OR    [__r1],A
06ED: 52 03    MOV   A,[X+3]
06EF: 2C 17    OR    [__r0],A
06F1: 51 16    MOV   A,[__r1]
06F3: 54 00    MOV   [X+0],A
(0095) 	indata |= (GET_DATA(D1_PORT, D1_PIN)) ? 0x02 : 0x00;
06F5: 49 08 20 TST   REG[8],32
06F8: A0 09    JZ    0x0702
06FA: 56 06 02 MOV   [X+6],2
06FD: 56 05 00 MOV   [X+5],0
0700: 80 07    JMP   0x0708
0702: 56 06 00 MOV   [X+6],0
0705: 56 05 00 MOV   [X+5],0
0708: 62 D0 00 MOV   REG[208],0
070B: 52 00    MOV   A,[X+0]
070D: 53 16    MOV   [__r1],A
070F: 55 17 00 MOV   [__r0],0
0712: 52 06    MOV   A,[X+6]
0714: 2C 16    OR    [__r1],A
0716: 52 05    MOV   A,[X+5]
0718: 2C 17    OR    [__r0],A
071A: 51 16    MOV   A,[__r1]
071C: 54 00    MOV   [X+0],A
(0096) 	indata |= (GET_DATA(D2_PORT, D2_PIN)) ? 0x04 : 0x00;
071E: 49 08 40 TST   REG[8],64
0721: A0 09    JZ    0x072B
0723: 56 08 04 MOV   [X+8],4
0726: 56 07 00 MOV   [X+7],0
0729: 80 07    JMP   0x0731
072B: 56 08 00 MOV   [X+8],0
072E: 56 07 00 MOV   [X+7],0
0731: 62 D0 00 MOV   REG[208],0
0734: 52 00    MOV   A,[X+0]
0736: 53 16    MOV   [__r1],A
0738: 55 17 00 MOV   [__r0],0
073B: 52 08    MOV   A,[X+8]
073D: 2C 16    OR    [__r1],A
073F: 52 07    MOV   A,[X+7]
0741: 2C 17    OR    [__r0],A
0743: 51 16    MOV   A,[__r1]
0745: 54 00    MOV   [X+0],A
(0097) 	indata |= (GET_DATA(D3_PORT, D3_PIN)) ? 0x08 : 0x00;
0747: 49 08 08 TST   REG[8],8
074A: A0 09    JZ    0x0754
074C: 56 0A 08 MOV   [X+10],8
074F: 56 09 00 MOV   [X+9],0
0752: 80 07    JMP   0x075A
0754: 56 0A 00 MOV   [X+10],0
0757: 56 09 00 MOV   [X+9],0
075A: 62 D0 00 MOV   REG[208],0
075D: 52 00    MOV   A,[X+0]
075F: 53 16    MOV   [__r1],A
0761: 55 17 00 MOV   [__r0],0
0764: 52 0A    MOV   A,[X+10]
0766: 2C 16    OR    [__r1],A
0768: 52 09    MOV   A,[X+9]
076A: 2C 17    OR    [__r0],A
076C: 51 16    MOV   A,[__r1]
076E: 54 00    MOV   [X+0],A
(0098) 	indata |= (GET_DATA(D4_PORT, D4_PIN)) ? 0x10 : 0x00;
0770: 49 00 01 TST   REG[0],1
0773: A0 09    JZ    0x077D
0775: 56 0C 10 MOV   [X+12],16
0778: 56 0B 00 MOV   [X+11],0
077B: 80 07    JMP   0x0783
077D: 56 0C 00 MOV   [X+12],0
0780: 56 0B 00 MOV   [X+11],0
0783: 62 D0 00 MOV   REG[208],0
0786: 52 00    MOV   A,[X+0]
0788: 53 16    MOV   [__r1],A
078A: 55 17 00 MOV   [__r0],0
078D: 52 0C    MOV   A,[X+12]
078F: 2C 16    OR    [__r1],A
0791: 52 0B    MOV   A,[X+11]
0793: 2C 17    OR    [__r0],A
0795: 51 16    MOV   A,[__r1]
0797: 54 00    MOV   [X+0],A
(0099) 	indata |= (GET_DATA(D5_PORT, D5_PIN)) ? 0x20 : 0x00;
0799: 49 08 02 TST   REG[8],2
079C: A0 09    JZ    0x07A6
079E: 56 0E 20 MOV   [X+14],32
07A1: 56 0D 00 MOV   [X+13],0
07A4: 80 07    JMP   0x07AC
07A6: 56 0E 00 MOV   [X+14],0
07A9: 56 0D 00 MOV   [X+13],0
07AC: 62 D0 00 MOV   REG[208],0
07AF: 52 00    MOV   A,[X+0]
07B1: 53 16    MOV   [__r1],A
07B3: 55 17 00 MOV   [__r0],0
07B6: 52 0E    MOV   A,[X+14]
07B8: 2C 16    OR    [__r1],A
07BA: 52 0D    MOV   A,[X+13]
07BC: 2C 17    OR    [__r0],A
07BE: 51 16    MOV   A,[__r1]
07C0: 54 00    MOV   [X+0],A
(0100) 	indata |= (GET_DATA(D7_PORT, D7_PIN)) ? 0x80 : 0x00;
07C2: 49 04 40 TST   REG[4],64
07C5: A0 09    JZ    0x07CF
07C7: 56 10 80 MOV   [X+16],128
07CA: 56 0F 00 MOV   [X+15],0
07CD: 80 07    JMP   0x07D5
07CF: 56 10 00 MOV   [X+16],0
07D2: 56 0F 00 MOV   [X+15],0
07D5: 62 D0 00 MOV   REG[208],0
07D8: 52 00    MOV   A,[X+0]
07DA: 53 16    MOV   [__r1],A
07DC: 55 17 00 MOV   [__r0],0
07DF: 52 10    MOV   A,[X+16]
07E1: 2C 16    OR    [__r1],A
07E3: 52 0F    MOV   A,[X+15]
07E5: 2C 17    OR    [__r0],A
07E7: 51 16    MOV   A,[__r1]
07E9: 54 00    MOV   [X+0],A
(0101) 	
(0102) 	return indata;
07EB: 52 00    MOV   A,[X+0]
07ED: 38 EF    ADD   SP,239
07EF: 20       POP   X
07F0: 7F       RET   
(0103) }
(0104) 
(0105) void apu_set_address(int address)
(0106) {
_apu_set_address:
  address              --> X-5
07F1: 10       PUSH  X
07F2: 4F       MOV   X,SP
(0107) 	//GO_OUTPUT(PA0_PORT, PA0_PIN);
(0108) 	//GO_OUTPUT(PA1_PORT, PA1_PIN);
(0109) 
(0110) #ifdef ADDR_DEBUG
(0111) 
(0112) 	UART_CPutString("Address = 0x");
(0113) 	UART_PutSHexByte(address);
(0114) 	UART_PutCRLF();
(0115) 	UART_FLUSH();
(0116) #endif
(0117) 
(0118) 	// this is gross: set address lines
(0119) 	if (address & 0x02) // PA0
07F3: 62 D0 00 MOV   REG[208],0
07F6: 52 FC    MOV   A,[X-4]
07F8: 21 02    AND   A,2
07FA: 53 16    MOV   [__r1],A
07FC: 52 FB    MOV   A,[X-5]
07FE: 21 00    AND   A,0
0800: 39 00    CMP   A,0
0802: B0 06    JNZ   0x0809
0804: 3C 16 00 CMP   [__r1],0
0807: A0 06    JZ    0x080E
(0120) 	{
(0121) 		SET_DATA(PA0_PORT, PA0_PIN);
0809: 43 08 01 OR    REG[8],1
(0122) #ifdef ADDR_DEBUG
(0123) 		UART_CPutString("PA0 up");
(0124) 		UART_PutCRLF();
(0125) 		UART_FLUSH();
(0126) #endif
(0127) }
080C: 80 04    JMP   0x0811
(0128) 	else
(0129) 	{
(0130) #ifdef ADDR_DEBUG
(0131) 		UART_CPutString("PA0 down");
(0132) 		UART_PutCRLF();
(0133) 		UART_FLUSH();
(0134) #endif
(0135) 		CLR_DATA(PA0_PORT, PA0_PIN);
080E: 41 08 FE AND   REG[8],254
(0136) 	}
(0137) 	
(0138) 	if (address & 0x01) // PA1
0811: 62 D0 00 MOV   REG[208],0
0814: 52 FC    MOV   A,[X-4]
0816: 21 01    AND   A,1
0818: 53 16    MOV   [__r1],A
081A: 52 FB    MOV   A,[X-5]
081C: 21 00    AND   A,0
081E: 39 00    CMP   A,0
0820: B0 06    JNZ   0x0827
0822: 3C 16 00 CMP   [__r1],0
0825: A0 06    JZ    0x082C
(0139) 	{
(0140) #ifdef ADDR_DEBUG
(0141) 		UART_CPutString("PA1 up");
(0142) 		UART_PutCRLF();
(0143) 		UART_FLUSH();
(0144) #endif
(0145) 		SET_DATA(PA1_PORT, PA1_PIN);
0827: 43 00 04 OR    REG[0],4
(0146) 	}
082A: 80 04    JMP   0x082F
(0147) 	else
(0148) 	{
(0149) #ifdef ADDR_DEBUG
(0150) 		UART_CPutString("PA1 down");
(0151) 		UART_PutCRLF();
(0152) 		UART_FLUSH();
(0153) #endif
(0154) 		CLR_DATA(PA1_PORT, PA1_PIN);
082C: 41 00 FB AND   REG[0],251
(0155) 	}
(0156) }
082F: 20       POP   X
0830: 7F       RET   
(0157) 
(0158) void apu_init(void)
(0159) {
(0160) 	GO_OUTPUT(_RESET_PORT, _RESET_PIN);
_apu_init:
0831: 43 03 10 OR    REG[3],16
0834: 71 10    OR    F,16
0836: 41 01 EF AND   REG[1],239
0839: 70 EF    AND   F,239
083B: 71 10    OR    F,16
083D: 43 00 10 OR    REG[0],16
0840: 70 EF    AND   F,239
(0161) 	GO_OUTPUT(_RD_PORT, _RD_PIN);
0842: 43 0B 80 OR    REG[11],128
0845: 71 10    OR    F,16
0847: 41 09 7F AND   REG[9],127
084A: 70 EF    AND   F,239
084C: 71 10    OR    F,16
084E: 43 08 80 OR    REG[8],128
0851: 70 EF    AND   F,239
(0162) 	GO_OUTPUT(_WR_PORT, _WR_PIN);
0853: 43 0B 04 OR    REG[11],4
0856: 71 10    OR    F,16
0858: 41 09 FB AND   REG[9],251
085B: 70 EF    AND   F,239
085D: 71 10    OR    F,16
085F: 43 08 04 OR    REG[8],4
0862: 70 EF    AND   F,239
(0163) 	
(0164) 	GO_OUTPUT(PA0_PORT, PA0_PIN);
0864: 43 0B 01 OR    REG[11],1
0867: 71 10    OR    F,16
0869: 41 09 FE AND   REG[9],254
086C: 70 EF    AND   F,239
086E: 71 10    OR    F,16
0870: 43 08 01 OR    REG[8],1
0873: 70 EF    AND   F,239
(0165) 	GO_OUTPUT(PA1_PORT, PA1_PIN);
0875: 43 03 04 OR    REG[3],4
0878: 71 10    OR    F,16
087A: 41 01 FB AND   REG[1],251
087D: 70 EF    AND   F,239
087F: 71 10    OR    F,16
0881: 43 00 04 OR    REG[0],4
0884: 70 EF    AND   F,239
(0166) 	
(0167) 	go_data_output();
0886: 9C 7E    CALL  _go_data_output
(0168) 	
(0169) 	CLR_DATA(_RESET_PORT, _RESET_PIN); // hold in reset
0888: 41 00 EF AND   REG[0],239
(0170) 	SET_DATA(_RD_PORT, _RD_PIN);
088B: 43 08 80 OR    REG[8],128
(0171) 	SET_DATA(_WR_PORT, _WR_PIN);
088E: 43 08 04 OR    REG[8],4
(0172) }
0891: 7F       RET   
(0173) 
(0174) void apu_shutdown(void)
(0175) {
(0176) 	CLR_DATA(_RESET_PORT, _RESET_PIN); // hold in reset
_apu_shutdown:
0892: 41 00 EF AND   REG[0],239
(0177) 	SET_DATA(_RD_PORT, _RD_PIN);
0895: 43 08 80 OR    REG[8],128
(0178) 	SET_DATA(_WR_PORT, _WR_PIN);
0898: 43 08 04 OR    REG[8],4
(0179) }
089B: 7F       RET   
(0180) 
(0181) void apu_reset(void)
(0182) {
_apu_reset:
  i                    --> X+0
089C: 10       PUSH  X
089D: 4F       MOV   X,SP
089E: 38 02    ADD   SP,2
(0183) 	int i;
(0184) 	
(0185) 	SET_DATA(_RD_PORT, _RD_PIN);
08A0: 43 08 80 OR    REG[8],128
(0186) 	SET_DATA(_WR_PORT, _WR_PIN);
08A3: 43 08 04 OR    REG[8],4
(0187) 	
(0188) 	CLR_DATA(_RESET_PORT, _RESET_PIN); // put in reset
08A6: 41 00 EF AND   REG[0],239
(0189) 	
(0190) 	for(i=0; i<RESET_DELAY; i++)
08A9: 56 01 00 MOV   [X+1],0
08AC: 56 00 00 MOV   [X+0],0
08AF: 77 01    INC   [X+1]
08B1: 0F 00 00 ADC   [X+0],0
08B4: 52 01    MOV   A,[X+1]
08B6: 11 4C    SUB   A,76
08B8: 52 00    MOV   A,[X+0]
08BA: 31 80    XOR   A,128
08BC: 19 9D    SBB   A,157
08BE: CF F0    JC    0x08AF
(0191) 		{ }
(0192) 	
(0193) 	SET_DATA(_RESET_PORT, _RESET_PIN); // exit from reset
08C0: 43 00 10 OR    REG[0],16
(0194) 	
(0195) 	for(i=0; i<RESET_DELAY; i++)
08C3: 56 01 00 MOV   [X+1],0
08C6: 56 00 00 MOV   [X+0],0
08C9: 77 01    INC   [X+1]
08CB: 0F 00 00 ADC   [X+0],0
08CE: 52 01    MOV   A,[X+1]
08D0: 11 4C    SUB   A,76
08D2: 52 00    MOV   A,[X+0]
08D4: 31 80    XOR   A,128
08D6: 19 9D    SBB   A,157
08D8: CF F0    JC    0x08C9
(0196) 		{ }
(0197) 	
(0198) }
08DA: 38 FE    ADD   SP,254
08DC: 20       POP   X
08DD: 7F       RET   
(0199) 
(0200) void apu_write(int address, unsigned char data)
(0201) {
_apu_write:
  i                    --> X+0
  data                 --> X-6
  address              --> X-5
08DE: 10       PUSH  X
08DF: 4F       MOV   X,SP
08E0: 38 02    ADD   SP,2
(0202) 	int i;
(0203) 	go_data_output();
08E2: 9C 22    CALL  _go_data_output
(0204) 	
(0205) 	apu_set_address(address);
08E4: 52 FB    MOV   A,[X-5]
08E6: 08       PUSH  A
08E7: 52 FC    MOV   A,[X-4]
08E9: 08       PUSH  A
08EA: 9F 05    CALL  _apu_set_address
(0206) 	
(0207) 	apu_put_data(data);
08EC: 52 FA    MOV   A,[X-6]
08EE: 08       PUSH  A
08EF: 9D 3F    CALL  _apu_put_data
08F1: 38 FD    ADD   SP,253
(0208) 	
(0209) 	SET_DATA(_WR_PORT, _WR_PIN);
08F3: 43 08 04 OR    REG[8],4
(0210) 	SET_DATA(_RD_PORT, _RD_PIN);
08F6: 43 08 80 OR    REG[8],128
(0211) 	
(0212) 	// strobe write pin
(0213) 	CLR_DATA(_WR_PORT, _WR_PIN);
08F9: 41 08 FB AND   REG[8],251
(0214) 	for(i=0; i<WRITE_DELAY; i++)
08FC: 56 01 00 MOV   [X+1],0
08FF: 56 00 00 MOV   [X+0],0
0902: 77 01    INC   [X+1]
0904: 0F 00 00 ADC   [X+0],0
0907: 52 01    MOV   A,[X+1]
0909: 11 0A    SUB   A,10
090B: 52 00    MOV   A,[X+0]
090D: 31 80    XOR   A,128
090F: 19 80    SBB   A,128
0911: CF F0    JC    0x0902
(0215) 		{ }
(0216) 	SET_DATA(_WR_PORT, _WR_PIN);
0913: 43 08 04 OR    REG[8],4
(0217) 	
(0218) }
0916: 38 FE    ADD   SP,254
0918: 20       POP   X
0919: 7F       RET   
(0219) 
(0220) unsigned char apu_read(int address)
(0221) {
_apu_read:
  data                 --> X+2
  i                    --> X+0
  address              --> X-5
091A: 10       PUSH  X
091B: 4F       MOV   X,SP
091C: 38 03    ADD   SP,3
(0222) 	unsigned char data;
(0223) 	int i;
(0224) 	
(0225) 	go_data_input();
091E: 9C 6F    CALL  _go_data_input
(0226) 	data = apu_get_data(); // dummy read debugging
0920: 9D 7A    CALL  _apu_get_data
0922: 62 D0 00 MOV   REG[208],0
0925: 54 02    MOV   [X+2],A
(0227) 	
(0228) 	apu_set_address(address);
0927: 52 FB    MOV   A,[X-5]
0929: 08       PUSH  A
092A: 52 FC    MOV   A,[X-4]
092C: 08       PUSH  A
092D: 9E C2    CALL  _apu_set_address
092F: 38 FE    ADD   SP,254
(0229) 	
(0230) 	SET_DATA(_RD_PORT, _RD_PIN);
0931: 43 08 80 OR    REG[8],128
(0231) 	SET_DATA(_WR_PORT, _WR_PIN);
0934: 43 08 04 OR    REG[8],4
(0232) 	
(0233) 	// strobe read pin
(0234) 	CLR_DATA(_RD_PORT, _RD_PIN);
0937: 41 08 7F AND   REG[8],127
(0235) 	
(0236) 	for(i=0; i<READ_DELAY; i++)
093A: 56 01 00 MOV   [X+1],0
093D: 56 00 00 MOV   [X+0],0
0940: 77 01    INC   [X+1]
0942: 0F 00 00 ADC   [X+0],0
0945: 52 01    MOV   A,[X+1]
0947: 11 0A    SUB   A,10
0949: 52 00    MOV   A,[X+0]
094B: 31 80    XOR   A,128
094D: 19 80    SBB   A,128
094F: CF F0    JC    0x0940
(0237) 		{ }
(0238) 	
(0239) 	data = apu_get_data();
0951: 9D 49    CALL  _apu_get_data
0953: 62 D0 00 MOV   REG[208],0
0956: 54 02    MOV   [X+2],A
(0240) 	SET_DATA(_RD_PORT, _RD_PIN);
0958: 43 08 80 OR    REG[8],128
(0241) 	
(0242) 	return data;
095B: 52 02    MOV   A,[X+2]
095D: 38 FD    ADD   SP,253
095F: 20       POP   X
0960: 7F       RET   
(0243) }
(0244) 
(0245) void sys_init(void)
(0246) {
(0247) 	apu_init();
_sys_init:
0961: 9E CE    CALL  _apu_init
(0248) }
0963: 7F       RET   
(0249) 
(0250) void start_rx(void)
(0251) {
_start_rx:
  addr                 --> X+6
  addr                 --> X+6
  not_ok               --> X+4
  msg                  --> X+2
  len                  --> X+0
0964: 10       PUSH  X
0965: 4F       MOV   X,SP
0966: 38 08    ADD   SP,8
(0252) 	unsigned char msg[2];
(0253) 	int len;
(0254) 	int not_ok = 0;
0968: 56 05 00 MOV   [X+5],0
096B: 56 04 00 MOV   [X+4],0
(0255) 	
(0256)     for(;;)
(0257)     {
(0258) 		len = 0;
096E: 56 01 00 MOV   [X+1],0
0971: 56 00 00 MOV   [X+0],0
(0259) 		if (not_ok)
0974: 3D 04 00 CMP   [X+4],0
0977: B0 06    JNZ   0x097E
0979: 3D 05 00 CMP   [X+5],0
097C: A0 15    JZ    0x0992
(0260) 		{
(0261) 			UART_CPutString("N");
097E: 10       PUSH  X
097F: 50 01    MOV   A,1
0981: 08       PUSH  A
0982: 50 52    MOV   A,82
0984: 5C       MOV   X,A
0985: 18       POP   A
0986: 7C 04 14 LCALL 0x0414
0989: 20       POP   X
(0262) 			not_ok = 0;
098A: 56 05 00 MOV   [X+5],0
098D: 56 04 00 MOV   [X+4],0
(0263) 		}
0990: 80 0D    JMP   0x099E
(0264) 		else
(0265) 		{
(0266) 			UART_CPutString("O");
0992: 10       PUSH  X
0993: 50 01    MOV   A,1
0995: 08       PUSH  A
0996: 50 50    MOV   A,80
0998: 5C       MOV   X,A
0999: 18       POP   A
099A: 7C 04 14 LCALL 0x0414
099D: 20       POP   X
(0267) 		}
(0268) 		//UART_PutCRLF();
(0269) 		UART_FLUSH();
099E: 10       PUSH  X
099F: 7C 03 10 LCALL 0x0310
09A2: 62 D0 00 MOV   REG[208],0
09A5: 20       POP   X
09A6: 53 17    MOV   [__r0],A
09A8: 47 17 10 TST   [__r0],16
09AB: AF F2    JZ    0x099E
09AD: 10       PUSH  X
09AE: 7C 03 10 LCALL 0x0310
09B1: 62 D0 00 MOV   REG[208],0
09B4: 20       POP   X
09B5: 10       PUSH  X
09B6: 7C 03 10 LCALL 0x0310
09B9: 62 D0 00 MOV   REG[208],0
09BC: 20       POP   X
09BD: 53 17    MOV   [__r0],A
09BF: 47 17 20 TST   [__r0],32
09C2: AF F2    JZ    0x09B5
(0270) 		
(0271) 		do
(0272) 		{
(0273)  			while(!(UART_bReadRxStatus() & 0x08))
09C4: 10       PUSH  X
09C5: 7C 03 16 LCALL 0x0316
09C8: 62 D0 00 MOV   REG[208],0
09CB: 20       POP   X
09CC: 53 17    MOV   [__r0],A
09CE: 47 17 08 TST   [__r0],8
09D1: AF F2    JZ    0x09C4
(0274)  			{
(0275) 	 			/* wait for data */
(0276)  			}
(0277)     		msg[len++] = UART_bReadRxData();
09D3: 52 01    MOV   A,[X+1]
09D5: 53 16    MOV   [__r1],A
09D7: 52 00    MOV   A,[X+0]
09D9: 53 17    MOV   [__r0],A
09DB: 51 16    MOV   A,[__r1]
09DD: 54 07    MOV   [X+7],A
09DF: 51 17    MOV   A,[__r0]
09E1: 54 06    MOV   [X+6],A
09E3: 51 16    MOV   A,[__r1]
09E5: 01 01    ADD   A,1
09E7: 54 01    MOV   [X+1],A
09E9: 51 17    MOV   A,[__r0]
09EB: 09 00    ADC   A,0
09ED: 54 00    MOV   [X+0],A
09EF: 10       PUSH  X
09F0: 7C 03 13 LCALL 0x0313
09F3: 62 D0 00 MOV   REG[208],0
09F6: 20       POP   X
09F7: 53 17    MOV   [__r0],A
09F9: 55 15 01 MOV   [__r2],1
09FC: 5A 14    MOV   [__r3],X
09FE: 06 14 02 ADD   [__r3],2
0A01: 52 07    MOV   A,[X+7]
0A03: 02 14    ADD   A,[__r3]
0A05: 53 14    MOV   [__r3],A
0A07: 52 06    MOV   A,[X+6]
0A09: 0A 15    ADC   A,[__r2]
0A0B: 60 D5    MOV   REG[213],A
0A0D: 51 17    MOV   A,[__r0]
0A0F: 3F 14    MVI   [__r3],A
(0278) 			
(0279) 		} while(!(
0A11: 3D 00 00 CMP   [X+0],0
0A14: B0 11    JNZ   0x0A26
0A16: 3D 01 01 CMP   [X+1],1
0A19: B0 0C    JNZ   0x0A26
0A1B: 62 D0 00 MOV   REG[208],0
0A1E: 52 02    MOV   A,[X+2]
0A20: 21 FC    AND   A,252
0A22: 39 A8    CMP   A,168
0A24: B0 0B    JNZ   0x0A30
0A26: 3D 00 00 CMP   [X+0],0
0A29: BF 9A    JNZ   0x09C4
0A2B: 3D 01 02 CMP   [X+1],2
0A2E: BF 95    JNZ   0x09C4
(0280) 				((len == 1) && ((msg[0] & 0xfc) != 0xa8)) ||
(0281) 				(len == 2)
(0282) 				));
(0283) 		
(0284) 		if ((msg[0] & 0xfc) == 0xa8)
0A30: 62 D0 00 MOV   REG[208],0
0A33: 52 02    MOV   A,[X+2]
0A35: 21 FC    AND   A,252
0A37: 39 A8    CMP   A,168
0A39: B0 1A    JNZ   0x0A54
(0285) 		{
(0286) 			// write
(0287) 			char addr = msg[0] & 0x3;
0A3B: 52 02    MOV   A,[X+2]
0A3D: 21 03    AND   A,3
0A3F: 54 06    MOV   [X+6],A
(0288) 			
(0289) 			apu_write(addr, msg[1]);
0A41: 52 03    MOV   A,[X+3]
0A43: 08       PUSH  A
0A44: 52 06    MOV   A,[X+6]
0A46: 53 16    MOV   [__r1],A
0A48: 50 00    MOV   A,0
0A4A: 08       PUSH  A
0A4B: 51 16    MOV   A,[__r1]
0A4D: 08       PUSH  A
0A4E: 9E 8E    CALL  _apu_write
0A50: 38 FD    ADD   SP,253
(0290) 		}
0A52: 8F 1B    JMP   0x096E
(0291) 		else if ((msg[0] & 0xfc) == 0xd4)
0A54: 62 D0 00 MOV   REG[208],0
0A57: 52 02    MOV   A,[X+2]
0A59: 21 FC    AND   A,252
0A5B: 39 D4    CMP   A,212
0A5D: B0 1F    JNZ   0x0A7D
(0292) 		{
(0293) 			// read
(0294) 			char addr = msg[0] & 0x3;
0A5F: 52 02    MOV   A,[X+2]
0A61: 21 03    AND   A,3
0A63: 54 06    MOV   [X+6],A
(0295) 			UART_PutChar(apu_read(addr));
0A65: 52 06    MOV   A,[X+6]
0A67: 53 16    MOV   [__r1],A
0A69: 50 00    MOV   A,0
0A6B: 08       PUSH  A
0A6C: 51 16    MOV   A,[__r1]
0A6E: 08       PUSH  A
0A6F: 9E A9    CALL  _apu_read
0A71: 38 FE    ADD   SP,254
0A73: 62 D0 00 MOV   REG[208],0
0A76: 10       PUSH  X
0A77: 7C 03 71 LCALL 0x0371
0A7A: 20       POP   X
(0296) 			//UART_PutChar(0x60 | addr);
(0297) 			//UART_PutChar((unsigned char)0x69);
(0298) 			//UART_FLUSH();
(0299) 			//UART_PutCRLF();
(0300) 		}
0A7B: 8E F2    JMP   0x096E
(0301) 		else
(0302) 		{
(0303) 			switch(msg[0])
0A7D: 52 02    MOV   A,[X+2]
0A7F: 54 07    MOV   [X+7],A
0A81: 56 06 00 MOV   [X+6],0
0A84: 52 07    MOV   A,[X+7]
0A86: 11 49    SUB   A,73
0A88: 62 D0 00 MOV   REG[208],0
0A8B: 53 13    MOV   [__rY],A
0A8D: 52 06    MOV   A,[X+6]
0A8F: 31 80    XOR   A,128
0A91: 19 80    SBB   A,128
0A93: C0 27    JC    0x0ABB
0A95: 2A 13    OR    A,[__rY]
0A97: A0 17    JZ    0x0AAF
0A99: 3D 06 00 CMP   [X+6],0
0A9C: B0 06    JNZ   0x0AA3
0A9E: 3D 07 52 CMP   [X+7],82
0AA1: A0 11    JZ    0x0AB3
0AA3: 3D 06 00 CMP   [X+6],0
0AA6: B0 06    JNZ   0x0AAD
0AA8: 3D 07 53 CMP   [X+7],83
0AAB: A0 0B    JZ    0x0AB7
0AAD: 80 0D    JMP   0x0ABB
(0304) 			{
(0305) 				case 'I':
(0306) 					apu_init();
0AAF: 9D 80    CALL  _apu_init
(0307) 					break;
0AB1: 8E BC    JMP   0x096E
(0308) 				case 'R':
(0309) 					apu_reset();
0AB3: 9D E7    CALL  _apu_reset
(0310) 					break;
0AB5: 8E B8    JMP   0x096E
(0311) 				case 'S':
(0312) 					apu_shutdown();
0AB7: 9D D9    CALL  _apu_shutdown
(0313) 					break;
0AB9: 8E B4    JMP   0x096E
(0314) 				default:
(0315) 					not_ok = 1;
0ABB: 56 05 01 MOV   [X+5],1
0ABE: 56 04 00 MOV   [X+4],0
0AC1: 8E AC    JMP   0x096E
0AC3: 38 F8    ADD   SP,248
0AC5: 20       POP   X
0AC6: 7F       RET   
(0316) 					break;
(0317) 			}
(0318) 		}
(0319) 		
(0320)     	// UART_PutChar (... )
(0321)     }
(0322) }
(0323) 
(0324) void main()
(0325) {
_main:
  i                    --> X+0
0AC7: 10       PUSH  X
0AC8: 4F       MOV   X,SP
0AC9: 38 02    ADD   SP,2
(0326) 	int i;
(0327) 	
(0328) 	M8C_EnableGInt;
0ACB: 71 01    OR    F,1
(0329) 	
(0330)     LED_1_Start();
0ACD: 10       PUSH  X
0ACE: 7C 04 CC LCALL 0x04CC
(0331)     LED_1_On();
0AD1: 7C 04 C8 LCALL 0x04C8
(0332)     
(0333)     UART_Start(UART_PARITY_NONE);
0AD4: 50 00    MOV   A,0
0AD6: 7C 02 FD LCALL 0x02FD
0AD9: 20       POP   X
(0334)     
(0335) 	sys_init();
0ADA: 9E 85    CALL  _sys_init
(0336) 
(0337) #ifdef ADDR_DEBUG
(0338) 	for(;;)
(0339) 	{
(0340) 		int j;
(0341) 		for(i=0; i<4; i++)
(0342) 		{
(0343) 			apu_set_address(i);
(0344) 			//PRT2DR |= 0x01;
(0345) 			for(j=0; j<i*1000;  j++)
(0346) 				;
(0347) 		}
(0348) 	}
(0349) #endif	
(0350) 	
(0351) 	start_rx();
0ADC: 9E 86    CALL  _start_rx
(0352) }
FILE: <library>
0ADE: 38 FE    ADD   SP,254
0AE0: 20       POP   X
0AE1: 8F FF    JMP   0x0AE1
--------------------------------------------------------------------------------


PSoC Designer Version: 4.4.1184

Copyright (C) 1994 - 2001 ImageCraft
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Code Compressor V1.09
ICCM8C version V1.69A
